{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# TIAI Solutions Website\n\n## Overview\n\nTIAI Solutions is a full-stack web application for an automation-first consulting company that specializes in transforming business data into actionable decisions. The platform showcases services ranging from KPI dashboards and automated reporting to advanced decision systems, featuring a modern React frontend with Express.js backend infrastructure.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side application is built as a single-page application (SPA) using React 18 with TypeScript, designed for static hosting on GitHub Pages. The frontend employs a component-based architecture with:\n\n- **Framework**: React with Vite as the build tool for fast development and optimized production builds\n- **Styling System**: Tailwind CSS for utility-first styling with shadcn/ui component library for consistent UI patterns\n- **Animation Framework**: Framer Motion for smooth page transitions and interactive elements, with GSAP ScrollTrigger for scroll-based animations\n- **State Management**: TanStack React Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation for type-safe form processing\n\n### Backend Architecture  \nThe server-side is structured as an Express.js application with TypeScript, designed to support both development and production environments:\n\n- **Framework**: Express.js with middleware for CORS, rate limiting, and request/response logging\n- **API Design**: RESTful endpoints under `/api` namespace for contacts, leads, and downloads\n- **Storage Strategy**: Abstracted storage interface allowing for both in-memory (development) and PostgreSQL (production) implementations\n- **Development Integration**: Vite middleware integration for hot module replacement during development\n\n### Data Storage Solutions\nThe application implements a flexible storage architecture:\n\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for database migrations and schema synchronization\n- **Connection**: Neon Database serverless PostgreSQL for production hosting\n- **Development Mode**: In-memory storage implementation for local development without database dependencies\n\n### Authentication and Authorization\nCurrently implements a simplified approach suitable for a consulting website:\n\n- **Rate Limiting**: IP-based rate limiting for API endpoints to prevent abuse\n- **Form Security**: Honeypot fields for bot detection in contact forms\n- **CORS Configuration**: Cross-origin resource sharing enabled for API access\n\n### Component Design Patterns\nThe frontend follows a structured component hierarchy:\n\n- **Layout Components**: Navbar, Footer, and ProgressRail for consistent page structure\n- **Section Components**: Reusable Section wrapper with intersection observer for scroll animations\n- **Form Components**: ContactForm with comprehensive validation and error handling\n- **Data Visualization**: ChartReveal and BeforeAfter components for interactive data presentation\n- **Card Components**: ServiceCard, TestimonialCard, and KPIStat for content display\n\n## External Dependencies\n\n### Frontend Dependencies\n- **UI Framework**: React 18 with React Router (Wouter) for navigation\n- **Styling**: Tailwind CSS with PostCSS for processing\n- **Component Library**: Radix UI primitives via shadcn/ui for accessible components\n- **Animation**: Framer Motion for micro-interactions and Embla Carousel for content carousels\n- **State Management**: TanStack React Query for API state and caching\n- **Form Validation**: Zod for schema validation with React Hook Form integration\n- **Date Handling**: date-fns for date formatting and manipulation\n\n### Backend Dependencies\n- **Server Framework**: Express.js with TypeScript support via tsx\n- **Database**: Drizzle ORM with PostgreSQL dialect\n- **Validation**: Zod for API request/response validation\n- **Development Tools**: Vite for frontend integration and esbuild for production bundling\n\n### Development and Build Tools\n- **Build System**: Vite with React plugin for frontend, esbuild for backend bundling\n- **Type Checking**: TypeScript with strict configuration\n- **Code Quality**: ESLint and Prettier configuration (referenced in components.json)\n- **Replit Integration**: Runtime error overlay and cartographer plugins for development\n\n### Cloud Services and APIs\n- **Database Hosting**: Neon Database serverless PostgreSQL\n- **Email Service**: Configured for Resend API integration (referenced in prompt documentation)\n- **Analytics**: Custom event tracking system via API leads endpoint\n- **Static Hosting**: Designed for GitHub Pages deployment with fallback API mocking\n\n### Asset Management\n- **Fonts**: Google Fonts integration (Inter, Space Grotesk, JetBrains Mono)\n- **Icons**: Lucide React for consistent iconography\n- **Images**: Lazy loading strategy with attached assets directory for static files","size_bytes":5070},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        display: [\"var(--font-display)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeUp: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(30px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-up\": \"fadeUp 0.8s ease-out forwards\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3046},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactSchema, insertLeadSchema, insertDownloadSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Rate limiting store (simple in-memory for demo)\n  const rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\n  // Simple rate limiting middleware\n  const rateLimit = (maxRequests = 5, windowMs = 60000) => {\n    return (req: any, res: any, next: any) => {\n      const clientIP = req.ip || req.connection.remoteAddress || 'unknown';\n      const now = Date.now();\n      const windowKey = `${clientIP}:${Math.floor(now / windowMs)}`;\n      \n      const current = rateLimitStore.get(windowKey) || { count: 0, resetTime: now + windowMs };\n      \n      if (current.count >= maxRequests) {\n        return res.status(429).json({ \n          error: 'Too many requests. Please try again later.' \n        });\n      }\n      \n      current.count++;\n      rateLimitStore.set(windowKey, current);\n      \n      // Clean up old entries\n      Array.from(rateLimitStore.entries()).forEach(([key, value]) => {\n        if (value.resetTime < now) {\n          rateLimitStore.delete(key);\n        }\n      });\n      \n      next();\n    };\n  };\n\n  // CORS middleware for API routes\n  app.use('/api/*', (req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n    \n    if (req.method === 'OPTIONS') {\n      res.sendStatus(200);\n    } else {\n      next();\n    }\n  });\n\n  // Contact form endpoint\n  app.post('/api/contact', rateLimit(5, 300000), async (req, res) => {\n    try {\n      // Honeypot check\n      if (req.body.honeypot && req.body.honeypot.trim() !== '') {\n        return res.status(400).json({ error: 'Spam detected' });\n      }\n\n      // Validate input\n      const validatedData = insertContactSchema.parse(req.body);\n      \n      // Create contact\n      const contact = await storage.createContact(validatedData);\n      \n      // Log lead for analytics\n      await storage.createLead({\n        source: 'contact_form',\n        payload: { contactId: contact.id, ...validatedData }\n      });\n\n      // TODO: Send email notification using Resend API\n      // This would be implemented with the Resend API key from environment\n      console.log('Contact form submission:', contact);\n      \n      res.json({ \n        success: true, \n        message: 'Thank you for your message. We\\'ll respond within 24 hours.' \n      });\n    } catch (error) {\n      console.error('Contact form error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          error: 'Invalid form data', \n          details: error.errors \n        });\n      }\n      \n      res.status(500).json({ \n        error: 'Something went wrong. Please try again or email us directly.' \n      });\n    }\n  });\n\n  // Lead tracking endpoint\n  app.post('/api/lead', rateLimit(10, 60000), async (req, res) => {\n    try {\n      const validatedData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(validatedData);\n      \n      res.json({ success: true, leadId: lead.id });\n    } catch (error) {\n      console.error('Lead tracking error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          error: 'Invalid lead data', \n          details: error.errors \n        });\n      }\n      \n      res.status(500).json({ error: 'Failed to track lead' });\n    }\n  });\n\n  // Download tracking endpoint\n  app.post('/api/download', rateLimit(10, 60000), async (req, res) => {\n    try {\n      const validatedData = insertDownloadSchema.parse(req.body);\n      const download = await storage.createDownload(validatedData);\n      \n      res.json({ success: true, downloadId: download.id });\n    } catch (error) {\n      console.error('Download tracking error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          error: 'Invalid download data', \n          details: error.errors \n        });\n      }\n      \n      res.status(500).json({ error: 'Failed to track download' });\n    }\n  });\n\n  // Serve JSON data files\n  app.get('/data/:filename', async (req, res) => {\n    try {\n      const filename = req.params.filename;\n      if (!filename.endsWith('.json')) {\n        return res.status(400).json({ error: 'Only JSON files are allowed' });\n      }\n      \n      const fs = await import('fs/promises');\n      const path = await import('path');\n      \n      const filePath = path.resolve(import.meta.dirname, \"..\", \"public\", \"data\", filename);\n      const data = await fs.readFile(filePath, 'utf-8');\n      const jsonData = JSON.parse(data);\n      \n      res.json(jsonData);\n    } catch (error) {\n      console.error('Error serving data file:', error);\n      res.status(404).json({ error: 'File not found' });\n    }\n  });\n\n  // Health check endpoint\n  app.get('/api/health', (req, res) => {\n    res.json({ status: 'healthy', timestamp: new Date().toISOString() });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5377},"server/storage.ts":{"content":"import { contacts, leads, downloads, type Contact, type InsertContact, type Lead, type InsertLead, type Download, type InsertDownload } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Contacts\n  createContact(contact: InsertContact): Promise<Contact>;\n  getContactById(id: string): Promise<Contact | undefined>;\n  getContacts(): Promise<Contact[]>;\n\n  // Leads\n  createLead(lead: InsertLead): Promise<Lead>;\n  getLeadById(id: string): Promise<Lead | undefined>;\n  getLeads(): Promise<Lead[]>;\n\n  // Downloads\n  createDownload(download: InsertDownload): Promise<Download>;\n  getDownloadById(id: string): Promise<Download | undefined>;\n  getDownloads(): Promise<Download[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Contacts\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const [contact] = await db\n      .insert(contacts)\n      .values(insertContact)\n      .returning();\n    return contact;\n  }\n\n  async getContactById(id: string): Promise<Contact | undefined> {\n    const [contact] = await db.select().from(contacts).where(eq(contacts.id, id));\n    return contact || undefined;\n  }\n\n  async getContacts(): Promise<Contact[]> {\n    return await db.select().from(contacts);\n  }\n\n  // Leads\n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const [lead] = await db\n      .insert(leads)\n      .values(insertLead)\n      .returning();\n    return lead;\n  }\n\n  async getLeadById(id: string): Promise<Lead | undefined> {\n    const [lead] = await db.select().from(leads).where(eq(leads.id, id));\n    return lead || undefined;\n  }\n\n  async getLeads(): Promise<Lead[]> {\n    return await db.select().from(leads);\n  }\n\n  // Downloads\n  async createDownload(insertDownload: InsertDownload): Promise<Download> {\n    const [download] = await db\n      .insert(downloads)\n      .values(insertDownload)\n      .returning();\n    return download;\n  }\n\n  async getDownloadById(id: string): Promise<Download | undefined> {\n    const [download] = await db.select().from(downloads).where(eq(downloads.id, id));\n    return download || undefined;\n  }\n\n  async getDownloads(): Promise<Download[]> {\n    return await db.select().from(downloads);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":2300},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  role: text(\"role\"),\n  message: text(\"message\").notNull(),\n  timeframe: text(\"timeframe\"),\n  budget: text(\"budget\"),\n  honeypot: text(\"honeypot\").default(\"\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  source: text(\"source\").notNull(),\n  payload: jsonb(\"payload\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const downloads = pgTable(\"downloads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  template_name: text(\"template_name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const insertDownloadSchema = createInsertSchema(downloads).omit({\n  id: true,\n  created_at: true,\n});\n\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\n\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Lead = typeof leads.$inferSelect;\n\nexport type InsertDownload = z.infer<typeof insertDownloadSchema>;\nexport type Download = typeof downloads.$inferSelect;\n","size_bytes":1790},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"next-themes\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport ProgressRail from \"./components/ProgressRail\";\nimport Home from \"./pages/Home\";\nimport Services from \"./pages/Services\";\nimport CaseStudies from \"./pages/CaseStudies\";\nimport Tools from \"./pages/Tools\";\nimport About from \"./pages/About\";\nimport Contact from \"./pages/Contact\";\nimport Blog from \"./pages/Blog\";\nimport BlogPost from \"./pages/BlogPost\";\nimport NotFound from \"@/pages/not-found\";\nimport ScrollToTop from \"./components/ScrollToTop\";\n\nfunction Router() {\n  return (\n    <>\n      <ScrollToTop />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/services\" component={Services} />\n        <Route path=\"/case-studies\" component={CaseStudies} />\n        <Route path=\"/tools\" component={Tools} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/blog\" component={Blog} />\n        <Route path=\"/blog/:slug\" component={BlogPost} />\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem>\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-background text-foreground\">\n            <Navbar />\n            <ProgressRail />\n            <Router />\n            <Footer />\n            <Toaster />\n          </div>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1901},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Space+Grotesk:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 20%, 98%);\n  --secondary-foreground: hsl(215, 16%, 47%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(187, 85%, 53%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', sans-serif;\n  --font-display: 'Space Grotesk', sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  \n  /* TIAI Brand Colors */\n  --tiai-primary: hsl(221, 83%, 53%);\n  --tiai-ink: hsl(222, 84%, 5%);\n  --tiai-slate: hsl(215, 16%, 47%);\n  --tiai-accent-cyan: hsl(187, 85%, 53%);\n  --tiai-accent-purple: hsl(271, 76%, 53%);\n  --tiai-success: hsl(159, 78%, 36%);\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(215, 20%, 65%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(187, 85%, 53%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(221, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer components {\n  .font-display {\n    font-family: var(--font-display);\n  }\n\n  .font-mono {\n    font-family: var(--font-mono);\n  }\n\n  .gradient-text {\n    background: linear-gradient(135deg, var(--tiai-primary), var(--tiai-accent-purple));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .glass-nav {\n    backdrop-filter: blur(20px);\n    background: hsl(var(--background) / 0.8);\n    border-bottom: 1px solid hsl(var(--border));\n  }\n\n  .hero-gradient {\n    background: linear-gradient(135deg, \n      hsl(var(--tiai-primary) / 0.1) 0%, \n      hsl(var(--tiai-accent-cyan) / 0.05) 50%, \n      hsl(var(--tiai-accent-purple) / 0.1) 100%);\n  }\n\n  .section-padding {\n    @apply py-16 md:py-24 lg:py-32;\n  }\n\n  .particle-bg::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: \n      radial-gradient(circle at 20% 20%, hsl(var(--tiai-primary) / 0.1) 0%, transparent 50%),\n      radial-gradient(circle at 80% 80%, hsl(var(--tiai-accent-cyan) / 0.1) 0%, transparent 50%),\n      radial-gradient(circle at 40% 60%, hsl(var(--tiai-accent-purple) / 0.1) 0%, transparent 50%);\n    pointer-events: none;\n  }\n\n  .service-tier {\n    transition: all 0.3s ease;\n    border: 2px solid transparent;\n  }\n\n  .service-tier:hover {\n    border-color: hsl(var(--primary));\n    transform: translateY(-8px);\n    box-shadow: 0 20px 40px hsl(var(--primary) / 0.1);\n  }\n\n  .chart-container {\n    opacity: 0;\n    transform: translateY(50px);\n    transition: all 0.8s ease-out;\n  }\n\n  .chart-container.revealed {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@layer utilities {\n  .animate-fade-up {\n    animation: fadeUp 0.8s ease-out forwards;\n    opacity: 0;\n    transform: translateY(30px);\n  }\n\n  .animate-fade-up.delay-1 { animation-delay: 0.1s; }\n  .animate-fade-up.delay-2 { animation-delay: 0.2s; }\n  .animate-fade-up.delay-3 { animation-delay: 0.3s; }\n\n  @keyframes fadeUp {\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--primary));\n    border-radius: 3px;\n  }\n\n  @media (prefers-reduced-motion: reduce) {\n    .animate-fade-up,\n    .chart-container,\n    .service-tier {\n      animation: none;\n      transition: none;\n      opacity: 1;\n      transform: none;\n    }\n  }\n}\n","size_bytes":4938},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BeforeAfter.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { AlertTriangle, CheckCircle, FileText, BarChart3 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport default function BeforeAfter() {\n  const [sliderPosition, setSliderPosition] = useState(0);\n  const [hasStartedAnimation, setHasStartedAnimation] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const sectionRef = useRef<HTMLDivElement>(null);\n  const isDragging = useRef(false);\n  const animationTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const handleMouseDown = () => {\n    isDragging.current = true;\n    // Stop any ongoing animation when user takes control\n    if (intervalRef.current) clearInterval(intervalRef.current);\n    if (animationTimeoutRef.current) clearTimeout(animationTimeoutRef.current);\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (!isDragging.current || !containerRef.current) return;\n    \n    const rect = containerRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));\n    setSliderPosition(percentage);\n  };\n\n  const handleMouseUp = () => {\n    isDragging.current = false;\n  };\n\n  // Intersection observer to trigger animation when section comes into view\n  useEffect(() => {\n    if (!sectionRef.current) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting && !hasStartedAnimation && !isDragging.current) {\n            setHasStartedAnimation(true);\n            \n            // Wait 1 second showing \"Before\" state, then start sliding immediately\n            animationTimeoutRef.current = setTimeout(() => {\n              // Animate from 0% to 100% over 4.5 seconds for better comprehension\n              let progress = 0;\n              intervalRef.current = setInterval(() => {\n                progress += 2; // Increment by 2% every 50ms (2.5 seconds total - faster)\n                setSliderPosition(progress);\n                \n                if (progress >= 100) {\n                  if (intervalRef.current) clearInterval(intervalRef.current);\n                }\n              }, 50);\n            }, 1000);\n          }\n        });\n      },\n      { \n        threshold: 0.01, // Trigger as soon as section starts appearing\n        rootMargin: '50px 0px -50px 0px' // Start earlier when approaching\n      }\n    );\n\n    observer.observe(sectionRef.current);\n\n    return () => {\n      observer.disconnect();\n      if (animationTimeoutRef.current) clearTimeout(animationTimeoutRef.current);\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, []); // Remove hasStartedAnimation dependency to allow re-triggering\n\n  useEffect(() => {\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, []);\n\n  return (\n    <div ref={sectionRef} className=\"max-w-4xl mx-auto\">\n      <div \n        ref={containerRef}\n        className=\"relative h-64 md:h-96 rounded-xl overflow-hidden cursor-ew-resize\"\n        data-testid=\"before-after-container\"\n      >\n        {/* Before State */}\n        <div className=\"absolute inset-0 bg-card border-2 border-red-500/20\">\n          <div className=\"p-4 md:p-8 h-full flex flex-col\">\n            <div className=\"flex items-center mb-4\">\n              <AlertTriangle className=\"text-red-500 mr-3 h-6 w-6\" />\n              <h3 className=\"font-display font-bold text-lg md:text-xl\" data-testid=\"before-title\">\n                Before: Spreadsheet Chaos\n              </h3>\n            </div>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 flex-1\">\n              {[\n                { name: 'Q1_Sales_FINAL_v3.xlsx', status: 'Modified 2 weeks ago' },\n                { name: 'Margins_Report_Copy.xlsx', status: 'Modified 1 month ago' },\n                { name: 'KPI_Dashboard_Draft.xlsx', status: 'Modified 3 weeks ago' },\n                { name: '❌ Formula Error', status: 'Manual calculation required', error: true },\n                { name: 'Budget_vs_Actual.xlsx', status: 'Data missing' },\n                { name: 'Weekly_Report.xlsx', status: 'Needs updating' },\n              ].map((file, index) => (\n                <div \n                  key={index}\n                  className={cn(\n                    'p-2 md:p-3 rounded text-xs md:text-sm',\n                    file.error \n                      ? 'bg-red-500/20 border-2 border-red-500/50' \n                      : 'bg-red-500/10'\n                  )}\n                  data-testid={`before-file-${index}`}\n                >\n                  <div className=\"font-mono text-xs break-all\">{file.name}</div>\n                  <div className=\"text-muted-foreground text-xs\">{file.status}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        \n        {/* After State */}\n        <div \n          className=\"absolute inset-0 bg-card border-2 border-primary/20 transition-transform duration-75 ease-out\"\n          style={{ \n            clipPath: `inset(0 ${100 - sliderPosition}% 0 0)`,\n            willChange: 'clip-path'\n          }}\n          data-testid=\"after-state\"\n        >\n          <div className=\"p-4 md:p-8 h-full flex flex-col\">\n            <div className=\"flex items-center mb-4\">\n              <BarChart3 className=\"text-primary mr-3 h-6 w-6\" />\n              <h3 className=\"font-display font-bold text-lg md:text-xl\" data-testid=\"after-title\">\n                After: Automated Dashboard\n              </h3>\n            </div>\n            <div className=\"grid grid-cols-2 gap-2 md:gap-4 flex-1\">\n              <div className=\"bg-primary/10 p-4 rounded-lg\" data-testid=\"kpi-revenue\">\n                <div className=\"text-2xl font-bold text-primary mb-2\">$2.4M</div>\n                <div className=\"text-sm text-muted-foreground\">Revenue (YTD)</div>\n                <div className=\"flex items-center mt-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mr-1\" />\n                  <span className=\"text-green-500 text-sm\">+12%</span>\n                </div>\n              </div>\n              <div className=\"bg-accent/10 p-4 rounded-lg\" data-testid=\"kpi-margin\">\n                <div className=\"text-2xl font-bold text-accent mb-2\">24.5%</div>\n                <div className=\"text-sm text-muted-foreground\">Gross Margin</div>\n                <div className=\"flex items-center mt-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500 mr-1\" />\n                  <span className=\"text-green-500 text-sm\">+2.1%</span>\n                </div>\n              </div>\n              <div className=\"bg-green-500/10 p-4 rounded-lg\" data-testid=\"kpi-accuracy\">\n                <div className=\"text-2xl font-bold text-green-500 mb-2\">94%</div>\n                <div className=\"text-sm text-muted-foreground\">Forecast Accuracy</div>\n              </div>\n              <div className=\"bg-purple-500/10 p-4 rounded-lg\" data-testid=\"kpi-time\">\n                <div className=\"text-2xl font-bold text-purple-500 mb-2\">15min</div>\n                <div className=\"text-sm text-muted-foreground\">Report Generation</div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n        \n        {/* Slider Handle */}\n        <div \n          className=\"absolute top-1/2 transform -translate-y-1/2 z-10 w-1 h-16 bg-primary rounded-full cursor-ew-resize\"\n          style={{ left: `${sliderPosition}%` }}\n          onMouseDown={handleMouseDown}\n          data-testid=\"slider-handle\"\n        >\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 bg-primary rounded-full border-3 border-white shadow-lg\" />\n        </div>\n      </div>\n      \n    </div>\n  );\n}\n","size_bytes":8087},"client/src/components/ChartReveal.tsx":{"content":"import { useRef, useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useIntersectionObserver } from '@/lib/viewport';\nimport { cn } from '@/lib/utils';\nimport { fetchCharts } from '@/lib/api';\nimport Chart from './Chart';\n\ninterface ChartData {\n  name: string;\n  type: string;\n  data: any[];\n  options: any;\n}\n\ninterface ChartRevealProps {\n  activeChart?: number;\n  onChartChange?: (index: number) => void;\n}\n\nexport default function ChartReveal({ activeChart = 0, onChartChange }: ChartRevealProps) {\n  const chartRef = useRef<HTMLDivElement>(null);\n  const { hasIntersected } = useIntersectionObserver(chartRef);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [charts, setCharts] = useState<ChartData[]>([]);\n  const [currentChart, setCurrentChart] = useState(activeChart);\n\n  // Load charts data from JSON\n  useEffect(() => {\n    const loadCharts = async () => {\n      try {\n        const chartsData = await fetchCharts();\n        if (chartsData && typeof chartsData === 'object') {\n          const chartsArray = Object.entries(chartsData).map(([key, value]: [string, any]) => ({\n            name: value.name,\n            type: value.type,\n            data: value.data,\n            options: value.options\n          }));\n          setCharts(chartsArray);\n          console.log('Charts loaded successfully:', chartsArray.length);\n        } else {\n          console.warn('No charts data available, using fallback');\n          // Set a simple fallback chart\n          setCharts([{\n            name: 'Sample Dashboard',\n            type: 'bar',\n            data: [],\n            options: {\n              chart: { type: 'bar' },\n              series: [{ name: 'Sample', data: [10, 20, 30, 40, 50] }],\n              xaxis: { categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May'] }\n            }\n          }]);\n        }\n      } catch (error) {\n        console.error('Failed to load charts:', error);\n        // Set fallback chart on error\n        setCharts([{\n          name: 'Demo Dashboard',\n          type: 'line',\n          data: [],\n          options: {\n            chart: { type: 'line' },\n            series: [{ name: 'Performance', data: [30, 40, 35, 50, 49, 60, 70] }],\n            xaxis: { categories: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] }\n          }\n        }]);\n      }\n    };\n\n    loadCharts();\n  }, []);\n\n  useEffect(() => {\n    if (hasIntersected && !isLoaded && charts.length > 0) {\n      // Simulate chart loading delay\n      const timer = setTimeout(() => {\n        setIsLoaded(true);\n      }, 300);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [hasIntersected, isLoaded, charts.length]);\n\n  const handleChartChange = (index: number) => {\n    if (index !== currentChart) {\n      setCurrentChart(index);\n      onChartChange?.(index);\n    }\n  };\n\n  if (charts.length === 0) {\n    return (\n      <div className=\"bg-card rounded-xl p-4 md:p-8 shadow-lg\">\n        <div className=\"h-60 md:h-80 bg-muted/30 rounded-lg flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading dashboard data...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      ref={chartRef}\n      className=\"bg-card rounded-xl p-4 md:p-8 shadow-lg\"\n      initial={{ opacity: 0, y: 50 }}\n      animate={hasIntersected ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}\n      transition={{ duration: 0.8 }}\n      data-testid=\"chart-reveal-container\"\n    >\n      {/* Chart Tabs */}\n      <div className=\"flex justify-center mb-6 md:mb-8\">\n        <div className=\"bg-muted rounded-lg p-1 inline-flex flex-wrap gap-1 md:gap-0\">\n          {charts.map((chart, index) => (\n            <motion.button\n              key={index}\n              onClick={() => handleChartChange(index)}\n              className={cn(\n                'px-2 md:px-4 py-2 rounded-md transition-all duration-200 text-xs md:text-sm relative min-w-0 flex-shrink',\n                currentChart === index\n                  ? 'bg-primary text-primary-foreground shadow-sm'\n                  : 'hover:bg-background'\n              )}\n              data-testid={`chart-tab-${index}`}\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              transition={{ duration: 0.2 }}\n            >\n              {currentChart === index && (\n                <motion.div\n                  className=\"absolute inset-0 bg-primary rounded-md\"\n                  layoutId=\"activeTab\"\n                  transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                />\n              )}\n              <span className=\"relative z-10 whitespace-nowrap\">{chart.name}</span>\n            </motion.button>\n          ))}\n        </div>\n      </div>\n\n      {/* Chart Display */}\n      <div className=\"relative\">\n        {isLoaded ? (\n          <motion.div\n            key={currentChart}\n            initial={{ opacity: 0, y: 30, scale: 0.95 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            exit={{ opacity: 0, y: -30, scale: 0.95 }}\n            transition={{ \n              duration: 0.5,\n              ease: [0.25, 0.46, 0.45, 0.94],\n              staggerChildren: 0.1\n            }}\n          >\n            <motion.div \n              className=\"mb-4\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.1, duration: 0.4 }}\n            >\n              <h3 className=\"font-display font-semibold text-lg md:text-xl\" data-testid=\"chart-title\">\n                {charts[currentChart].name}\n              </h3>\n              <p className=\"text-muted-foreground text-sm md:text-base\">\n                Interactive visualization with automated data refresh\n              </p>\n            </motion.div>\n            \n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2, duration: 0.4 }}\n            >\n              <Chart \n                options={charts[currentChart].options}\n                height=\"300px\"\n                className=\"rounded-lg border md:h-[400px]\"\n              />\n            </motion.div>\n          </motion.div>\n        ) : (\n          <div className=\"h-60 md:h-80 bg-muted/30 rounded-lg flex items-center justify-center\">\n            <motion.div\n              animate={{ rotate: 360 }}\n              transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n              className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full\"\n            />\n          </div>\n        )}\n      </div>\n    </motion.div>\n  );\n}","size_bytes":6793},"client/src/components/ContactForm.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { contactFormSchema, type ContactFormData } from '@/lib/validators';\nimport { api } from '@/lib/api';\nimport { trackFormSubmission } from '@/lib/analytics';\nimport { Loader2, Send } from 'lucide-react';\n\nexport default function ContactForm() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      company: '',\n      role: '',\n      message: '',\n      timeframe: '',\n      budget: '',\n      honeypot: '',\n    },\n  });\n\n  const onSubmit = async (data: ContactFormData) => {\n    if (isSubmitting) return;\n\n    setIsSubmitting(true);\n    \n    try {\n      const result = await api.contact(data);\n      \n      if (result.success) {\n        toast({\n          title: 'Message sent successfully!',\n          description: result.message || 'We\\'ll respond within 24 hours.',\n        });\n        \n        form.reset();\n        trackFormSubmission('contact', true);\n      } else {\n        throw new Error(result.error || 'Failed to send message');\n      }\n    } catch (error) {\n      console.error('Form submission error:', error);\n      \n      toast({\n        variant: 'destructive',\n        title: 'Failed to send message',\n        description: error instanceof Error ? error.message : 'Please try again or email us directly.',\n      });\n      \n      trackFormSubmission('contact', false);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 50 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.8 }}\n      className=\"bg-card p-8 rounded-xl shadow-lg max-w-4xl mx-auto\"\n    >\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Information */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <Label htmlFor=\"name\">Name *</Label>\n            <Input\n              {...form.register('name')}\n              placeholder=\"Your name\"\n              className=\"mt-2\"\n              data-testid=\"input-name\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.name.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"email\">Email *</Label>\n            <Input\n              {...form.register('email')}\n              type=\"email\"\n              placeholder=\"your.email@company.com\"\n              className=\"mt-2\"\n              data-testid=\"input-email\"\n            />\n            {form.formState.errors.email && (\n              <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.email.message}</p>\n            )}\n          </div>\n        </div>\n\n        {/* Company Information */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <Label htmlFor=\"company\">Company</Label>\n            <Input\n              {...form.register('company')}\n              placeholder=\"Your company\"\n              className=\"mt-2\"\n              data-testid=\"input-company\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"role\">Role</Label>\n            <Select onValueChange={(value) => form.setValue('role', value)}>\n              <SelectTrigger className=\"mt-2\" data-testid=\"select-role\">\n                <SelectValue placeholder=\"Select your role\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"finance\">Finance Leader</SelectItem>\n                <SelectItem value=\"operations\">Operations Manager</SelectItem>\n                <SelectItem value=\"analyst\">Data Analyst</SelectItem>\n                <SelectItem value=\"executive\">Executive</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Project Description */}\n        <div>\n          <Label htmlFor=\"message\">Project Description *</Label>\n          <Textarea\n            {...form.register('message')}\n            placeholder=\"Describe your current data challenges and automation goals...\"\n            rows={4}\n            className=\"mt-2\"\n            data-testid=\"textarea-message\"\n          />\n          {form.formState.errors.message && (\n            <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.message.message}</p>\n          )}\n        </div>\n\n        {/* Project Details */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <Label htmlFor=\"timeframe\">Project Timeframe</Label>\n            <Select onValueChange={(value) => form.setValue('timeframe', value)}>\n              <SelectTrigger className=\"mt-2\" data-testid=\"select-timeframe\">\n                <SelectValue placeholder=\"Select timeframe\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"immediate\">Immediate (&lt; 1 month)</SelectItem>\n                <SelectItem value=\"quarter\">This Quarter</SelectItem>\n                <SelectItem value=\"half-year\">Next 6 months</SelectItem>\n                <SelectItem value=\"year\">Within a year</SelectItem>\n                <SelectItem value=\"exploring\">Just exploring</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"budget\">Budget Range</Label>\n            <Select onValueChange={(value) => form.setValue('budget', value)}>\n              <SelectTrigger className=\"mt-2\" data-testid=\"select-budget\">\n                <SelectValue placeholder=\"Select budget range\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"under-10k\">Under $10K</SelectItem>\n                <SelectItem value=\"10k-25k\">$10K - $25K</SelectItem>\n                <SelectItem value=\"25k-50k\">$25K - $50K</SelectItem>\n                <SelectItem value=\"50k-100k\">$50K - $100K</SelectItem>\n                <SelectItem value=\"over-100k\">Over $100K</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Honeypot field for spam protection */}\n        <div style={{ display: 'none' }}>\n          <Input {...form.register('honeypot')} tabIndex={-1} autoComplete=\"off\" />\n        </div>\n\n        {/* Submit Button */}\n        <Button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"w-full bg-primary text-primary-foreground py-4 text-lg font-semibold hover:bg-primary/90 transition-all transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed\"\n          data-testid=\"button-submit-contact\"\n        >\n          {isSubmitting ? (\n            <>\n              <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              Sending...\n            </>\n          ) : (\n            <>\n              <Send className=\"mr-2 h-5 w-5\" />\n              Send Message\n            </>\n          )}\n        </Button>\n\n        <p className=\"text-sm text-muted-foreground text-center\">\n          We'll respond within 24 hours with next steps and a proposed approach.\n        </p>\n      </form>\n    </motion.div>\n  );\n}\n","size_bytes":7778},"client/src/components/Footer.tsx":{"content":"import { Link } from 'wouter';\nimport { Github, Linkedin, Twitter, Mail, Phone, MapPin } from 'lucide-react';\nimport logoHorizontal from '@assets/tiai-logo-horizontal.png';\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"bg-foreground text-background py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div className=\"md:col-span-2\">\n            <img \n              src={logoHorizontal} \n              alt=\"TIAI Solutions\" \n              className=\"h-10 sm:h-12 w-auto mb-4 transition-all duration-200 hover:opacity-80 hover:scale-105\" \n              data-testid=\"footer-logo\"\n            />\n            <p className=\"text-background/70 mb-6 max-w-md\" data-testid=\"footer-description\">\n              Automation-first consulting that turns your numbers into momentum. \n              From data chaos to decision clarity.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"https://linkedin.com/company/tiai-solutions\" \n                className=\"w-10 h-10 bg-background/10 rounded-lg flex items-center justify-center hover:bg-background/20 transition-colors\"\n                aria-label=\"LinkedIn\"\n                data-testid=\"social-linkedin\"\n              >\n                <Linkedin className=\"h-5 w-5 text-background/70\" />\n              </a>\n              <a \n                href=\"https://twitter.com/tiai_solutions\" \n                className=\"w-10 h-10 bg-background/10 rounded-lg flex items-center justify-center hover:bg-background/20 transition-colors\"\n                aria-label=\"Twitter\"\n                data-testid=\"social-twitter\"\n              >\n                <Twitter className=\"h-5 w-5 text-background/70\" />\n              </a>\n              <a \n                href=\"https://github.com/tiai-solutions\" \n                className=\"w-10 h-10 bg-background/10 rounded-lg flex items-center justify-center hover:bg-background/20 transition-colors\"\n                aria-label=\"GitHub\"\n                data-testid=\"social-github\"\n              >\n                <Github className=\"h-5 w-5 text-background/70\" />\n              </a>\n            </div>\n          </div>\n          \n          {/* Quick Links */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Quick Links</h3>\n            <ul className=\"space-y-3\">\n              <li>\n                <Link href=\"/\" data-testid=\"footer-link-home\">\n                  <span className=\"text-background/70 hover:text-background transition-colors\">Home</span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services\" data-testid=\"footer-link-services\">\n                  <span className=\"text-background/70 hover:text-background transition-colors\">Services</span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/case-studies\" data-testid=\"footer-link-case-studies\">\n                  <span className=\"text-background/70 hover:text-background transition-colors\">Case Studies</span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/tools\" data-testid=\"footer-link-tools\">\n                  <span className=\"text-background/70 hover:text-background transition-colors\">Tools</span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/about\" data-testid=\"footer-link-about\">\n                  <span className=\"text-background/70 hover:text-background transition-colors\">About</span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" data-testid=\"footer-link-contact\">\n                  <span className=\"text-background/70 hover:text-background transition-colors\">Contact</span>\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Contact Info */}\n          <div>\n            <h3 className=\"font-semibold mb-4\">Get in Touch</h3>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-center text-background/70\">\n                <Mail className=\"h-4 w-4 mr-3\" />\n                <a href=\"mailto:hello@tiai-solutions.com\" data-testid=\"footer-email\">\n                  hello@tiai-solutions.com\n                </a>\n              </li>\n              <li className=\"flex items-center text-background/70\">\n                <Phone className=\"h-4 w-4 mr-3\" />\n                <span data-testid=\"footer-phone\">+1 (555) 123-4567</span>\n              </li>\n              <li className=\"flex items-start text-background/70\">\n                <MapPin className=\"h-4 w-4 mr-3 mt-1\" />\n                <span data-testid=\"footer-location\">San Francisco, CA</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-background/20 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-background/70 text-sm\" data-testid=\"footer-copyright\">\n            © {currentYear} TIAI Solutions. All rights reserved.\n          </p>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <a \n              href=\"/privacy\" \n              className=\"text-background/70 hover:text-background text-sm transition-colors\"\n              data-testid=\"footer-privacy\"\n            >\n              Privacy Policy\n            </a>\n            <a \n              href=\"/terms\" \n              className=\"text-background/70 hover:text-background text-sm transition-colors\"\n              data-testid=\"footer-terms\"\n            >\n              Terms of Service\n            </a>\n            <a \n              href=\"/cookies\" \n              className=\"text-background/70 hover:text-background text-sm transition-colors\"\n              data-testid=\"footer-cookies\"\n            >\n              Cookie Policy\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6054},"client/src/components/KPIStat.tsx":{"content":"import { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface KPIStatProps {\n  value: string;\n  label: string;\n  trend?: 'up' | 'down' | 'neutral';\n  trendValue?: string;\n  color?: 'primary' | 'accent' | 'success' | 'purple';\n  delay?: number;\n}\n\nconst colorClasses = {\n  primary: 'text-primary bg-primary/10',\n  accent: 'text-accent bg-accent/10', \n  success: 'text-green-500 bg-green-500/10',\n  purple: 'text-purple-500 bg-purple-500/10',\n};\n\nexport default function KPIStat({ \n  value, \n  label, \n  trend = 'neutral', \n  trendValue, \n  color = 'primary',\n  delay = 0 \n}: KPIStatProps) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.5, delay }}\n      className={cn(\n        'p-6 rounded-xl border hover:border-primary/50 transition-all duration-300 hover:shadow-lg',\n        colorClasses[color]\n      )}\n      data-testid={`kpi-stat-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      <div className={cn('text-3xl font-bold mb-2', colorClasses[color].split(' ')[0])}>\n        {value}\n      </div>\n      <div className=\"text-sm text-muted-foreground mb-2\">\n        {label}\n      </div>\n      {trend !== 'neutral' && trendValue && (\n        <div className=\"flex items-center\">\n          {trend === 'up' ? (\n            <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n          ) : (\n            <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n          )}\n          <span className={cn(\n            'text-sm font-medium',\n            trend === 'up' ? 'text-green-500' : 'text-red-500'\n          )}>\n            {trendValue}\n          </span>\n        </div>\n      )}\n    </motion.div>\n  );\n}\n","size_bytes":1789},"client/src/components/Navbar.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Menu, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport logoIcon from '@assets/tiai-logo-icon.png';\nimport ThemeToggle from './ThemeToggle';\n\nexport default function Navbar() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [location] = useLocation();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const navItems = [\n    { href: '/', label: 'Home' },\n    { href: '/services', label: 'Services' },\n    { href: '/case-studies', label: 'Case Studies' },\n    { href: '/tools', label: 'Tools' },\n    { href: '/blog', label: 'Blog' },\n    { href: '/about', label: 'About' },\n  ];\n\n  return (\n    <nav className={cn(\n      'fixed top-0 left-0 right-0 z-50 transition-all duration-300',\n      isScrolled \n        ? 'glass-nav backdrop-blur-xl border-b' \n        : 'bg-transparent'\n    )}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\" data-testid=\"logo-link\">\n            <div className=\"flex items-center space-x-3\">\n              <img \n                src={logoIcon} \n                alt=\"TIAI Solutions\" \n                className=\"h-8 sm:h-10 w-auto transition-all duration-200 hover:opacity-80\"\n              />\n              <div className=\"font-display font-bold text-xl gradient-text\">\n                TIAI Solutions\n              </div>\n            </div>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                data-testid={`nav-link-${item.label.toLowerCase().replace(' ', '-')}`}\n              >\n                <span className={cn(\n                  'transition-colors duration-200',\n                  location === item.href\n                    ? 'text-primary font-medium'\n                    : 'text-muted-foreground hover:text-primary'\n                )}>\n                  {item.label}\n                </span>\n              </Link>\n            ))}\n            <ThemeToggle />\n            <Link href=\"/contact\" data-testid=\"nav-cta-contact\">\n              <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n                Contact\n              </Button>\n            </Link>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"md:hidden\"\n            onClick={() => setIsOpen(!isOpen)}\n            data-testid=\"mobile-menu-toggle\"\n          >\n            {isOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isOpen && (\n          <div className=\"md:hidden bg-card border-t border-border\">\n            <div className=\"px-4 py-4 space-y-4\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  onClick={() => setIsOpen(false)}\n                  data-testid={`mobile-nav-link-${item.label.toLowerCase().replace(' ', '-')}`}\n                >\n                  <div className={cn(\n                    'block py-2 transition-colors duration-200',\n                    location === item.href\n                      ? 'text-primary font-medium'\n                      : 'text-muted-foreground hover:text-primary'\n                  )}>\n                    {item.label}\n                  </div>\n                </Link>\n              ))}\n              <Link href=\"/contact\" onClick={() => setIsOpen(false)}>\n                <Button className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\">\n                  Contact\n                </Button>\n              </Link>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4326},"client/src/components/ProgressRail.tsx":{"content":"import { useActiveSection } from '@/lib/viewport';\nimport { cn } from '@/lib/utils';\n\nconst sections = [\n  { id: 'hero', label: 'Hero' },\n  { id: 'problem', label: 'Problem' },\n  { id: 'capabilities', label: 'Capabilities' },\n  { id: 'charts', label: 'Charts' },\n  { id: 'testimonials', label: 'Testimonials' },\n];\n\nexport default function ProgressRail() {\n  const activeSection = useActiveSection();\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.querySelector(`[data-section=\"${sectionId}\"]`);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }\n  };\n\n  return (\n    <div className=\"progress-rail hidden lg:block fixed right-8 top-1/2 transform -translate-y-1/2 z-50\">\n      <div className=\"flex flex-col space-y-4\">\n        {sections.map((section) => (\n          <button\n            key={section.id}\n            onClick={() => scrollToSection(section.id)}\n            className={cn(\n              'w-3 h-3 rounded-full transition-all duration-300 hover:scale-125',\n              activeSection === section.id \n                ? 'bg-primary shadow-lg shadow-primary/50' \n                : 'bg-muted hover:bg-muted-foreground/50'\n            )}\n            aria-label={`Go to ${section.label} section`}\n            data-testid={`progress-dot-${section.id}`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1391},"client/src/components/Section.tsx":{"content":"import { useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { useIntersectionObserver } from '@/lib/viewport';\nimport { cn } from '@/lib/utils';\n\ninterface SectionProps {\n  children: React.ReactNode;\n  className?: string;\n  id?: string;\n  dataSection?: string;\n  parallax?: boolean;\n  delay?: number;\n}\n\nexport default function Section({ \n  children, \n  className, \n  id, \n  dataSection, \n  parallax = false, \n  delay = 0 \n}: SectionProps) {\n  const sectionRef = useRef<HTMLDivElement>(null);\n  const { isIntersecting, hasIntersected } = useIntersectionObserver(sectionRef);\n\n  return (\n    <motion.section\n      ref={sectionRef}\n      id={id}\n      data-section={dataSection}\n      className={cn('relative', className)}\n      initial={{ opacity: 0, y: 50 }}\n      animate={hasIntersected ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}\n      transition={{ duration: 0.8, delay, ease: [0.25, 0.46, 0.45, 0.94] }}\n      style={parallax ? {\n        transform: isIntersecting ? 'translateY(0)' : 'translateY(20px)',\n        transition: 'transform 0.6s ease-out'\n      } : undefined}\n    >\n      {children}\n    </motion.section>\n  );\n}\n","size_bytes":1151},"client/src/components/ServiceCard.tsx":{"content":"import { motion } from 'framer-motion';\nimport { CheckCircle, ArrowRight } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface ServiceFeature {\n  title: string;\n  description: string;\n}\n\ninterface ServiceCardProps {\n  title: string;\n  description: string;\n  features: ServiceFeature[];\n  icon: React.ReactNode;\n  color: 'primary' | 'accent' | 'success' | 'purple';\n  isPopular?: boolean;\n  ctaText: string;\n  onCTAClick: () => void;\n  delay?: number;\n}\n\nconst colorClasses = {\n  primary: {\n    icon: 'bg-primary/10 text-primary',\n    border: 'border-primary',\n    button: 'bg-primary text-primary-foreground hover:bg-primary/90',\n    badge: 'bg-primary/10 text-primary',\n  },\n  accent: {\n    icon: 'bg-accent/10 text-accent',\n    border: 'border-accent',\n    button: 'bg-accent/10 text-accent hover:bg-accent/20',\n    badge: 'bg-accent/10 text-accent',\n  },\n  success: {\n    icon: 'bg-green-500/10 text-green-500',\n    border: 'border-green-500',\n    button: 'bg-green-500/10 text-green-500 hover:bg-green-500/20',\n    badge: 'bg-green-500/10 text-green-500',\n  },\n  purple: {\n    icon: 'bg-purple-500/10 text-purple-500',\n    border: 'border-purple-500',\n    button: 'bg-purple-500/10 text-purple-500 hover:bg-purple-500/20',\n    badge: 'bg-purple-500/10 text-purple-500',\n  },\n};\n\nexport default function ServiceCard({ \n  title, \n  description, \n  features, \n  icon, \n  color,\n  isPopular,\n  ctaText,\n  onCTAClick,\n  delay = 0 \n}: ServiceCardProps) {\n  const colors = colorClasses[color];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 50 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6, delay }}\n      className={cn(\n        'service-tier bg-card p-8 rounded-xl shadow-lg relative flex flex-col h-full',\n        isPopular && `border-2 ${colors.border}`\n      )}\n      data-testid={`service-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      {/* Popular Badge */}\n      {isPopular && (\n        <div className={cn(\n          'absolute -top-3 left-1/2 transform -translate-x-1/2 text-xs px-3 py-1 rounded-full',\n          colors.badge\n        )}>\n          POPULAR\n        </div>\n      )}\n\n      <div className=\"text-center mb-6\">\n        <div className={cn('w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4', colors.icon)}>\n          {icon}\n        </div>\n        <h3 className=\"font-display text-2xl font-bold mb-2\" data-testid=\"service-title\">\n          {title}\n        </h3>\n        <p className=\"text-muted-foreground\" data-testid=\"service-description\">\n          {description}\n        </p>\n      </div>\n      \n      <ul className=\"space-y-4 mb-8 flex-grow\">\n        {features.map((feature, index) => (\n          <motion.li\n            key={index}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5, delay: delay + index * 0.1 }}\n            className=\"flex items-start\"\n            data-testid={`service-feature-${index}`}\n          >\n            <CheckCircle className=\"text-green-500 mr-3 mt-1 h-5 w-5 flex-shrink-0\" />\n            <div>\n              <div className=\"font-semibold\">{feature.title}</div>\n              <div className=\"text-sm text-muted-foreground\">{feature.description}</div>\n            </div>\n          </motion.li>\n        ))}\n      </ul>\n      \n      <Button \n        onClick={onCTAClick}\n        className={cn('w-full', colors.button)}\n        data-testid=\"service-cta-button\"\n      >\n        {ctaText}\n        <ArrowRight className=\"ml-2 h-4 w-4\" />\n      </Button>\n    </motion.div>\n  );\n}\n","size_bytes":3634},"client/src/components/TestimonialCard.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Star, User } from 'lucide-react';\n\ninterface TestimonialCardProps {\n  name: string;\n  role: string;\n  company: string;\n  content: string;\n  rating?: number;\n  delay?: number;\n}\n\nexport default function TestimonialCard({ \n  name, \n  role, \n  company, \n  content, \n  rating = 5, \n  delay = 0 \n}: TestimonialCardProps) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 50 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6, delay }}\n      className=\"bg-card p-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300\"\n      data-testid={`testimonial-${name.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      {/* Rating */}\n      <div className=\"flex items-center mb-4\">\n        {Array.from({ length: rating }).map((_, i) => (\n          <Star key={i} className=\"w-4 h-4 fill-yellow-400 text-yellow-400\" />\n        ))}\n      </div>\n      \n      {/* Content */}\n      <blockquote className=\"text-muted-foreground mb-6 italic\" data-testid=\"testimonial-content\">\n        \"{content}\"\n      </blockquote>\n      \n      {/* Author */}\n      <div className=\"flex items-center\">\n        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center mr-3\">\n          <User className=\"h-5 w-5 text-primary\" />\n        </div>\n        <div>\n          <div className=\"font-semibold\" data-testid=\"testimonial-name\">{name}</div>\n          <div className=\"text-sm text-muted-foreground\" data-testid=\"testimonial-role\">\n            {role}, {company}\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":1613},"client/src/data/caseStudies.tsx":{"content":"import React from 'react';\nimport { Factory, Calculator, Coins, BarChart3, TrendingUp, Clock } from 'lucide-react';\n\nexport interface CaseStudy {\n  id: string;\n  title: string;\n  subtitle: string;\n  industry: string;\n  description: string;\n  challenge: string;\n  solution: string;\n  results: {\n    metric: string;\n    value: string;\n    description: string;\n  }[];\n  technologies: string[];\n  icon: React.ReactNode;\n  color: 'primary' | 'accent' | 'success' | 'purple';\n  timeline: string;\n  clientQuote?: {\n    text: string;\n    author: string;\n    role: string;\n  };\n}\n\nexport const caseStudies: CaseStudy[] = [\n  {\n    id: 'ammonia-transfer-kpi',\n    title: 'Ammonia Transfer KPI Suite',\n    subtitle: 'Automated Weekly Reporting System',\n    industry: 'Chemical Processing',\n    description: 'Comprehensive automation solution for weekly performance reporting with PowerPoint export and VBA interface for a major chemical processing facility.',\n    challenge: 'The client was spending 15+ hours weekly manually collecting data from multiple sources, creating charts, and formatting PowerPoint presentations for leadership reviews. Data inconsistencies and human errors were common.',\n    solution: 'We developed an integrated VBA system that automatically pulls data from their ERP, performs calculations, generates charts, and exports formatted PowerPoint presentations. The system includes exception reporting and automated email distribution.',\n    results: [\n      {\n        metric: 'Time Saved',\n        value: '15 hours/week',\n        description: 'Reduced from manual to automated process'\n      },\n      {\n        metric: 'Accuracy Improvement',\n        value: '99.5%',\n        description: 'Eliminated manual calculation errors'\n      },\n      {\n        metric: 'Report Delivery',\n        value: 'Automated',\n        description: 'Scheduled weekly distribution to stakeholders'\n      }\n    ],\n    technologies: ['VBA', 'Power Query', 'PowerPoint API', 'Excel Automation'],\n    icon: React.createElement(Factory),\n    color: 'primary',\n    timeline: '6 weeks',\n    clientQuote: {\n      text: 'This automation transformed our weekly reporting process. What used to take our team nearly two days now happens automatically every Monday morning.',\n      author: 'Sarah Chen',\n      role: 'Finance Director'\n    }\n  },\n  {\n    id: 'b2c-margin-simulator',\n    title: 'B2C Margin Simulator',\n    subtitle: 'Interactive Pricing Optimization Tool',\n    industry: 'Retail & E-commerce',\n    description: 'Advanced Excel-based simulator for discount and pricing analysis with volume mix optimization for retail decision-making.',\n    challenge: 'The retail client needed to quickly evaluate pricing scenarios considering volume discounts, product mix changes, and competitive positioning. Manual calculations were time-consuming and error-prone.',\n    solution: 'We created an interactive Excel model with VBA automation that allows real-time scenario testing. The simulator includes Monte Carlo analysis, sensitivity testing, and automated report generation for different pricing strategies.',\n    results: [\n      {\n        metric: 'Margin Improvement',\n        value: '+3.2%',\n        description: 'Optimized pricing strategy impact'\n      },\n      {\n        metric: 'Scenarios Modeled',\n        value: '500+',\n        description: 'Different pricing combinations tested'\n      },\n      {\n        metric: 'Decision Speed',\n        value: 'Real-time',\n        description: 'Instant scenario evaluation'\n      }\n    ],\n    technologies: ['Excel VBA', 'Monte Carlo', 'Optimization', 'Scenario Analysis'],\n    icon: React.createElement(Calculator),\n    color: 'accent',\n    timeline: '8 weeks',\n    clientQuote: {\n      text: 'The margin simulator completely changed how we approach pricing decisions. We can now test hundreds of scenarios in minutes instead of days.',\n      author: 'Michael Rodriguez',\n      role: 'VP Operations'\n    }\n  },\n  {\n    id: 'capex-controller-toolkit',\n    title: 'CAPEX Controller Toolkit',\n    subtitle: 'Comprehensive Project Tracking System',\n    industry: 'Manufacturing',\n    description: 'End-to-end capital expenditure tracking system with QBR data models, project KPI monitoring, and automated cost control reporting.',\n    challenge: 'The manufacturing client was managing 150+ capital projects with limited visibility into budget performance, timeline adherence, and ROI tracking. Monthly QBR preparation took weeks.',\n    solution: 'We developed a comprehensive Power BI solution with automated data integration from their project management and financial systems. The toolkit includes real-time dashboards, automated variance alerts, and one-click QBR report generation.',\n    results: [\n      {\n        metric: 'Projects Tracked',\n        value: '150+',\n        description: 'Simultaneous project monitoring'\n      },\n      {\n        metric: 'Budget Variance',\n        value: '±2%',\n        description: 'Improved budget accuracy'\n      },\n      {\n        metric: 'QBR Preparation',\n        value: '2 hours',\n        description: 'Reduced from 2 weeks to 2 hours'\n      }\n    ],\n    technologies: ['Power BI', 'DAX', 'SQL', 'Azure Data Factory'],\n    icon: React.createElement(Coins),\n    color: 'success',\n    timeline: '12 weeks',\n    clientQuote: {\n      text: 'The CAPEX toolkit gave us unprecedented visibility into our project portfolio. We can now make informed decisions about resource allocation and project prioritization.',\n      author: 'Jennifer Walsh',\n      role: 'CFO'\n    }\n  }\n];\n\nexport const caseStudyStats = [\n  {\n    value: '50+',\n    label: 'Projects Completed',\n    description: 'Successful automation implementations'\n  },\n  {\n    value: '200+',\n    label: 'Hours Saved Weekly',\n    description: 'Across all client implementations'\n  },\n  {\n    value: '95%',\n    label: 'Client Satisfaction',\n    description: 'Based on post-implementation surveys'\n  },\n  {\n    value: '3.2x',\n    label: 'Average ROI',\n    description: 'Return on automation investment'\n  }\n];\n","size_bytes":6032},"client/src/data/charts.ts":{"content":"export const salesTrend = [\n  { month: \"Jan\", actual: 120, plan: 100 },\n  { month: \"Feb\", actual: 135, plan: 110 },\n  { month: \"Mar\", actual: 128, plan: 120 },\n  { month: \"Apr\", actual: 155, plan: 130 },\n  { month: \"May\", actual: 162, plan: 140 },\n  { month: \"Jun\", actual: 170, plan: 150 },\n];\n\nexport const marginBridge = [\n  { label: \"Plan Margin\", value: 100 },\n  { label: \"Product Mix\", value: 15 },\n  { label: \"Pricing\", value: -8 },\n  { label: \"cogs\", value: 12 },\n  { label: \"Transport\", value: -3 },\n  { label: \"Storage & Handeling\", value: 6 },\n  { label: \"Actual margin\", value: 122 },\n];\n\nexport const forecastVsActual = [\n  { month: \"Q1\", forecast: 300, actual: 325 },\n  { month: \"Q2\", forecast: 320, actual: 315 },\n  { month: \"Q3\", forecast: 340, actual: 360 },\n  { month: \"Q4\", forecast: 360, actual: 355 },\n];\n\nexport const kpiMetrics = [\n  {\n    value: \"$2.4M\",\n    label: \"Revenue (YTD)\",\n    trend: \"up\" as const,\n    trendValue: \"+12%\",\n    color: \"primary\" as const,\n  },\n  {\n    value: \"24.5%\",\n    label: \"Gross Margin\",\n    trend: \"up\" as const,\n    trendValue: \"+2.1%\",\n    color: \"accent\" as const,\n  },\n  {\n    value: \"94%\",\n    label: \"Forecast Accuracy\",\n    trend: \"neutral\" as const,\n    color: \"success\" as const,\n  },\n  {\n    value: \"15min\",\n    label: \"Report Generation\",\n    trend: \"neutral\" as const,\n    color: \"purple\" as const,\n  },\n];\n","size_bytes":1376},"client/src/data/services.tsx":{"content":"import React from 'react';\nimport { BarChart3, Bot, Brain, Calculator, FileText, Database, Zap } from 'lucide-react';\n\nexport const services = {\n  tiers: [\n    {\n      title: 'Essentials',\n      description: 'Foundation for data-driven decisions',\n      features: [\n        {\n          title: 'KPI Tree Development',\n          description: 'Define and structure your key metrics'\n        },\n        {\n          title: 'Monthly Dashboards',\n          description: 'Performance tracking and variance analysis'\n        },\n        {\n          title: 'Data Cleanup',\n          description: 'Standardize and validate data sources'\n        },\n        {\n          title: 'Basic Reporting',\n          description: 'Automated monthly and quarterly reports'\n        }\n      ],\n      icon: React.createElement(BarChart3),\n      color: 'primary',\n      ctaText: 'Get Started',\n      isPopular: false,\n    },\n    {\n      title: 'Automation',\n      description: 'Streamlined workflows and processes',\n      features: [\n        {\n          title: 'Scheduled Refresh',\n          description: 'Automated data updates and alerts'\n        },\n        {\n          title: 'Power Query Pipelines',\n          description: 'ETL processes for data transformation'\n        },\n        {\n          title: 'VBA Tooling',\n          description: 'Custom automation for Excel workflows'\n        },\n        {\n          title: 'Power Automate Flows',\n          description: 'Workflow automation across systems'\n        }\n      ],\n      icon: React.createElement(Bot),\n      color: 'primary',\n      ctaText: 'Start Automation',\n      isPopular: true,\n    },\n    {\n      title: 'Decision Systems',\n      description: 'Advanced analytics and optimization',\n      features: [\n        {\n          title: 'Margin Simulators',\n          description: 'Price and discount optimization models'\n        },\n        {\n          title: 'Scenario Planners',\n          description: 'What-if analysis and forecasting'\n        },\n        {\n          title: 'Smart Alerting',\n          description: 'Predictive alerts and notifications'\n        },\n        {\n          title: 'Advanced Analytics',\n          description: 'ML-powered insights and predictions'\n        }\n      ],\n      icon: React.createElement(Brain),\n      color: 'accent',\n      ctaText: 'Explore Systems',\n      isPopular: false,\n    }\n  ],\n\n  capabilities: [\n    {\n      title: 'KPI Dashboards',\n      description: 'Real-time performance tracking with automated data refresh and alerts.',\n      features: [\n        { title: 'Revenue & margin tracking', description: 'Monitor key financial metrics' },\n        { title: 'Forecast vs actual analysis', description: 'Compare predictions to results' },\n        { title: 'Exception reporting', description: 'Automated alerts for variances' }\n      ],\n      icon: React.createElement(BarChart3),\n      color: 'primary'\n    },\n    {\n      title: 'Automated Reporting',\n      description: 'Scheduled reports delivered automatically to stakeholders.',\n      features: [\n        { title: 'Weekly performance reports', description: 'Automated weekly summaries' },\n        { title: 'PowerPoint automation', description: 'Auto-generated presentations' },\n        { title: 'Email distribution', description: 'Automated report delivery' }\n      ],\n      icon: React.createElement(FileText),\n      color: 'accent'\n    },\n    {\n      title: 'Cost & Margin Insight',\n      description: 'Deep dive analytics on profitability and cost drivers.',\n      features: [\n        { title: 'Margin bridge analysis', description: 'Waterfall analysis of changes' },\n        { title: 'Cost center tracking', description: 'Department-level cost monitoring' },\n        { title: 'Price optimization', description: 'Data-driven pricing strategies' }\n      ],\n      icon: React.createElement(Calculator),\n      color: 'purple'\n    },\n    {\n      title: 'Project & CAPEX Control',\n      description: 'Comprehensive project tracking and capital expenditure management.',\n      features: [\n        { title: 'Budget vs actual tracking', description: 'Real-time budget monitoring' },\n        { title: 'Milestone monitoring', description: 'Project progress tracking' },\n        { title: 'ROI calculations', description: 'Return on investment analysis' }\n      ],\n      icon: React.createElement(Zap),\n      color: 'success'\n    }\n  ]\n};\n\nexport const faqItems = [\n  {\n    question: 'How quickly can I see results from automation?',\n    answer: 'Most clients see immediate time savings within the first week of implementation. Full ROI is typically realized within 2-3 months as processes become fully automated and insights drive better decisions.'\n  },\n  {\n    question: 'Do you work with existing Excel and Power BI systems?',\n    answer: 'Absolutely! We specialize in enhancing your current tools rather than replacing them. Our automation builds on familiar platforms like Excel, Power BI, and VBA, ensuring your team can easily adopt and maintain the solutions.'\n  },\n  {\n    question: 'What level of technical knowledge is required from my team?',\n    answer: 'None! Our solutions are designed for business users, not technical specialists. We provide comprehensive training and documentation so your team can confidently use and maintain the automated systems.'\n  },\n  {\n    question: 'How do you ensure data accuracy and reliability?',\n    answer: 'We implement multiple validation layers, automated error checking, and reconciliation processes. Every automation includes built-in quality controls and audit trails to ensure data integrity.'\n  },\n  {\n    question: 'Can the automation be customized for our specific industry?',\n    answer: 'Yes! Our solutions are highly customizable and have been successfully implemented across manufacturing, retail, chemical processing, and service industries. We adapt our frameworks to your specific KPIs and business processes.'\n  },\n  {\n    question: 'What ongoing support do you provide?',\n    answer: 'We offer comprehensive support including system monitoring, regular health checks, updates for changing business needs, and training for new team members. Our goal is long-term partnership, not just implementation.'\n  }\n];\n","size_bytes":6196},"client/src/data/testimonials.ts":{"content":"export const testimonials = [\n  {\n    name: 'Sarah Chen',\n    role: 'Finance Director',\n    company: 'Chemical Corp',\n    content: 'TIAI Solutions transformed our weekly reporting from a 2-day manual process to a 15-minute automated workflow. The accuracy and insights are game-changing.',\n    rating: 5\n  },\n  {\n    name: 'Michael Rodriguez',\n    role: 'VP Operations',\n    company: 'Retail Plus',\n    content: 'The margin simulator helped us optimize our pricing strategy and increased profitability by 3.2% in just one quarter. Exceptional ROI.',\n    rating: 5\n  },\n  {\n    name: 'Jennifer Walsh',\n    role: 'CFO',\n    company: 'Manufacturing Inc',\n    content: 'Their CAPEX tracking system gives us real-time visibility into all our projects. No more surprises, just data-driven decisions.',\n    rating: 5\n  },\n  {\n    name: 'David Park',\n    role: 'Business Analyst',\n    company: 'Tech Solutions',\n    content: 'The automated KPI dashboard saves us 20 hours per week and provides insights we never had before. Outstanding work.',\n    rating: 5\n  },\n  {\n    name: 'Lisa Thompson',\n    role: 'Operations Manager',\n    company: 'Supply Chain Co',\n    content: 'Implementation was seamless and the team provided excellent training. Our forecasting accuracy improved by 25%.',\n    rating: 5\n  }\n];\n","size_bytes":1299},"client/src/data/tools.tsx":{"content":"import React from 'react';\nimport { FileSpreadsheet, BarChart3, Code, ClipboardList, TrendingUp, Calculator } from 'lucide-react';\n\nexport interface Tool {\n  id: string;\n  name: string;\n  description: string;\n  category: 'Excel' | 'Power BI' | 'VBA' | 'Templates';\n  features: string[];\n  downloadUrl: string;\n  fileSize: string;\n  lastUpdated: string;\n  icon: React.ReactNode;\n  color: 'primary' | 'accent' | 'success' | 'purple' | 'orange' | 'blue';\n  isPopular?: boolean;\n}\n\nexport const tools: Tool[] = [\n  {\n    id: 'kpi-dashboard-template',\n    name: 'KPI Dashboard Template',\n    description: 'Complete Excel dashboard with dynamic charts, KPI scorecards, and automated refresh capabilities.',\n    category: 'Excel',\n    features: [\n      'Dynamic chart generation',\n      'Automated data refresh',\n      'KPI scorecard with traffic lights',\n      'Variance analysis',\n      'Drill-down capabilities'\n    ],\n    downloadUrl: '/templates/kpi-dashboard-template.xlsx',\n    fileSize: '2.1 MB',\n    lastUpdated: '2024-01-15',\n    icon: React.createElement(BarChart3),\n    color: 'primary',\n    isPopular: true\n  },\n  {\n    id: 'margin-analysis-toolkit',\n    name: 'Margin Analysis Toolkit',\n    description: 'Comprehensive margin bridge analysis with waterfall charts and scenario modeling capabilities.',\n    category: 'Excel',\n    features: [\n      'Margin bridge waterfall charts',\n      'Scenario comparison',\n      'Cost driver analysis',\n      'Price sensitivity modeling',\n      'Automated variance explanations'\n    ],\n    downloadUrl: '/templates/margin-analysis-toolkit.xlsx',\n    fileSize: '1.8 MB',\n    lastUpdated: '2024-01-10',\n    icon: React.createElement(Calculator),\n    color: 'accent'\n  },\n  {\n    id: 'power-bi-starter-kit',\n    name: 'Power BI Starter Kit',\n    description: 'Pre-built Power BI templates with common business metrics and DAX formulas for quick implementation.',\n    category: 'Power BI',\n    features: [\n      'Financial KPI dashboard',\n      'Sales performance tracker',\n      'Custom DAX measures',\n      'Responsive design',\n      'Data model best practices'\n    ],\n    downloadUrl: '/templates/power-bi-starter-kit.pbit',\n    fileSize: '3.2 MB',\n    lastUpdated: '2024-01-12',\n    icon: React.createElement(TrendingUp),\n    color: 'success'\n  },\n  {\n    id: 'vba-automation-library',\n    name: 'VBA Automation Library',\n    description: 'Collection of VBA modules for common automation tasks, report generation, and data processing.',\n    category: 'VBA',\n    features: [\n      'Email automation modules',\n      'Chart generation functions',\n      'Data validation routines',\n      'Report formatting macros',\n      'Error handling framework'\n    ],\n    downloadUrl: '/templates/vba-automation-library.xlam',\n    fileSize: '890 KB',\n    lastUpdated: '2024-01-08',\n    icon: React.createElement(Code),\n    color: 'purple'\n  },\n  {\n    id: 'budget-planning-model',\n    name: 'Budget Planning Model',\n    description: 'Dynamic budget model with variance analysis, rolling forecasts, and automated consolidation.',\n    category: 'Excel',\n    features: [\n      'Rolling 12-month forecast',\n      'Department consolidation',\n      'Variance analysis',\n      'Budget vs actual tracking',\n      'Scenario planning'\n    ],\n    downloadUrl: '/templates/budget-planning-model.xlsx',\n    fileSize: '1.5 MB',\n    lastUpdated: '2024-01-05',\n    icon: React.createElement(ClipboardList),\n    color: 'blue'\n  },\n  {\n    id: 'capex-tracking-system',\n    name: 'CAPEX Tracking System',\n    description: 'Complete capital expenditure tracking with project milestones, ROI calculations, and approval workflows.',\n    category: 'Excel',\n    features: [\n      'Project milestone tracking',\n      'ROI and NPV calculations',\n      'Approval workflow management',\n      'Budget vs actual analysis',\n      'Executive summary reports'\n    ],\n    downloadUrl: '/templates/capex-tracking-system.xlsx',\n    fileSize: '2.7 MB',\n    lastUpdated: '2024-01-18',\n    icon: React.createElement(FileSpreadsheet),\n    color: 'orange'\n  }\n];\n\nexport const toolCategories = ['All', 'Excel', 'Power BI', 'VBA', 'Templates'];\n\nexport const toolStats = [\n  {\n    value: '10,000+',\n    label: 'Downloads',\n    description: 'Templates downloaded by professionals'\n  },\n  {\n    value: '4.8/5',\n    label: 'Average Rating',\n    description: 'User satisfaction score'\n  },\n  {\n    value: '50+',\n    label: 'Hours Saved',\n    description: 'Average time saved per template'\n  }\n];\n","size_bytes":4478},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/analytics.ts":{"content":"import { api } from './api';\n\nexport function trackEvent(eventName: string, properties: Record<string, any> = {}) {\n  // Track user interactions for analytics\n  api.lead({\n    source: 'analytics',\n    payload: {\n      event: eventName,\n      properties: {\n        ...properties,\n        timestamp: new Date().toISOString(),\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n      }\n    }\n  }).catch(error => {\n    console.debug('Analytics tracking failed:', error);\n  });\n}\n\nexport function trackPageView(page: string) {\n  trackEvent('page_view', { page });\n}\n\nexport function trackButtonClick(buttonName: string, section?: string) {\n  trackEvent('button_click', { button: buttonName, section });\n}\n\nexport function trackFormSubmission(formName: string, success: boolean) {\n  trackEvent('form_submission', { form: formName, success });\n}\n\nexport function trackDownload(templateName: string) {\n  trackEvent('template_download', { template: templateName });\n}\n","size_bytes":983},"client/src/lib/api.ts":{"content":"export type ContactPayload = {\n  name: string;\n  email: string;\n  company?: string;\n  role?: string;\n  message: string;\n  timeframe?: string;\n  budget?: string;\n  honeypot?: string;\n};\n\nexport type LeadPayload = {\n  source: string;\n  payload: Record<string, any>;\n};\n\nexport type DownloadPayload = {\n  template_name: string;\n  email: string;\n  company?: string;\n};\n\nexport interface APIClient {\n  contact(data: ContactPayload): Promise<{ success: boolean; message?: string; error?: string }>;\n  lead(data: LeadPayload): Promise<{ success: boolean; leadId?: string; error?: string }>;\n  download(data: DownloadPayload): Promise<{ success: boolean; downloadId?: string; error?: string }>;\n  health(): Promise<{ status: string; timestamp: string }>;\n}\n\nfunction createMockAPI(): APIClient {\n  return {\n    async contact(data: ContactPayload) {\n      console.log('[MOCK] Contact submission:', data);\n      \n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Simulate occasional failures for testing\n      if (Math.random() < 0.1) {\n        return { success: false, error: 'Mock API: Simulated server error' };\n      }\n      \n      return { \n        success: true, \n        message: 'Thank you for your message. We\\'ll respond within 24 hours.' \n      };\n    },\n\n    async lead(data: LeadPayload) {\n      console.log('[MOCK] Lead tracking:', data);\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return { success: true, leadId: `mock-${Date.now()}` };\n    },\n\n    async download(data: DownloadPayload) {\n      console.log('[MOCK] Download tracking:', data);\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return { success: true, downloadId: `mock-${Date.now()}` };\n    },\n\n    async health() {\n      return { status: 'healthy', timestamp: new Date().toISOString() };\n    }\n  };\n}\n\nfunction createSupabaseAPI(): APIClient {\n  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n  const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n  \n  if (!supabaseUrl || !supabaseKey) {\n    console.warn('Supabase credentials missing, falling back to mock API');\n    return createMockAPI();\n  }\n\n  return {\n    async contact(data: ContactPayload) {\n      try {\n        // Insert into leads table via Supabase REST API\n        const response = await fetch(`${supabaseUrl}/rest/v1/leads`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${supabaseKey}`,\n            'apikey': supabaseKey,\n            'Prefer': 'return=minimal'\n          },\n          body: JSON.stringify({\n            full_name: data.name,\n            email: data.email,\n            company: data.company || null,\n            phone: null,\n            message: data.message,\n            source: 'contact_page',\n            referer_url: document.referrer || null,\n            user_agent: navigator.userAgent,\n            created_at: new Date().toISOString()\n          }),\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('Supabase error:', errorText);\n          return { success: false, error: 'Failed to submit form. Please try again.' };\n        }\n\n        return { \n          success: true, \n          message: 'Thank you for your message. We\\'ll respond within 24 hours.' \n        };\n      } catch (error) {\n        console.error('Supabase API error:', error);\n        return { success: false, error: 'Network error. Please try again.' };\n      }\n    },\n\n    async lead(data: LeadPayload) {\n      try {\n        // Insert analytics/tracking data - for now just log it\n        console.log('Lead tracking:', data);\n        return { success: true, leadId: `lead-${Date.now()}` };\n      } catch (error) {\n        console.error('Supabase lead API error:', error);\n        return { success: false, error: 'Network error' };\n      }\n    },\n\n    async download(data: DownloadPayload) {\n      // For downloads, we might just track the event and return a direct link\n      await this.lead({ source: 'template_download', payload: data });\n      return { success: true, downloadId: `download-${Date.now()}` };\n    },\n\n    async health() {\n      try {\n        const response = await fetch(`${supabaseUrl}/rest/v1/`, {\n          headers: {\n            'Authorization': `Bearer ${supabaseKey}`,\n            'apikey': supabaseKey,\n          },\n        });\n        return { status: response.ok ? 'healthy' : 'error', timestamp: new Date().toISOString() };\n      } catch (error) {\n        return { status: 'error', timestamp: new Date().toISOString() };\n      }\n    }\n  };\n}\n\nfunction createCloudflareAPI(): APIClient {\n  const baseUrl = import.meta.env.VITE_CLOUDFLARE_API_BASE;\n  \n  if (!baseUrl) {\n    console.warn('Cloudflare API base URL missing, falling back to mock API');\n    return createMockAPI();\n  }\n\n  return {\n    async contact(data: ContactPayload) {\n      try {\n        const response = await fetch(`${baseUrl}/contact`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data),\n        });\n\n        if (!response.ok) {\n          const error = await response.text();\n          return { success: false, error };\n        }\n\n        const result = await response.json();\n        return result;\n      } catch (error) {\n        console.error('Cloudflare API error:', error);\n        return { success: false, error: 'Network error. Please try again.' };\n      }\n    },\n\n    async lead(data: LeadPayload) {\n      try {\n        const response = await fetch(`${baseUrl}/lead`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data),\n        });\n\n        if (!response.ok) {\n          const error = await response.text();\n          return { success: false, error };\n        }\n\n        const result = await response.json();\n        return result;\n      } catch (error) {\n        console.error('Cloudflare lead API error:', error);\n        return { success: false, error: 'Network error' };\n      }\n    },\n\n    async download(data: DownloadPayload) {\n      await this.lead({ source: 'template_download', payload: data });\n      return { success: true, downloadId: `download-${Date.now()}` };\n    },\n\n    async health() {\n      try {\n        const response = await fetch(`${baseUrl}/health`);\n        const result = await response.json();\n        return result;\n      } catch (error) {\n        return { status: 'error', timestamp: new Date().toISOString() };\n      }\n    }\n  };\n}\n\nexport function createAPI(): APIClient {\n  const provider = import.meta.env.VITE_API_PROVIDER || 'supabase';\n  \n  console.log(`[API] Using provider: ${provider}`);\n  \n  switch (provider) {\n    case 'supabase':\n      return createSupabaseAPI();\n    case 'cloudflare':\n      return createCloudflareAPI();\n    case 'mock':\n      return createMockAPI();\n    default:\n      return createSupabaseAPI();\n  }\n}\n\nexport const api = createAPI();\n\n// Supabase imports for scheduling\nimport { supabase, isSupabaseConfigured } from './supabase';\nimport type { CallRequest, Post } from '../types';\n\nexport async function createCall(req: CallRequest) {\n  try {\n    if (!isSupabaseConfigured || !supabase) {\n      // Fallback to email if Supabase not configured\n      console.log('Supabase not configured, would send email instead:', req);\n      \n      // Simulate successful call creation for demo\n      const mockId = 'mock-' + Date.now().toString();\n      \n      // In production, this would trigger an email to your business email\n      // with the call request details\n      return mockId;\n    }\n    \n    const { data, error } = await supabase.from('calls').insert(req).select('id').single();\n    if (error) throw error;\n    return data.id as string;\n  } catch (error) {\n    console.error('Error creating call:', error);\n    throw error;\n  }\n}\n\n// Data fetchers for JSON files\nexport async function fetchCharts() {\n  try {\n    const response = await fetch('/data/charts.json');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch charts data: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching charts:', error);\n    return null;\n  }\n}\n\nexport async function fetchServices() {\n  try {\n    const response = await fetch('/data/services.json');\n    if (!response.ok) {\n      throw new Error('Failed to fetch services data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching services:', error);\n    return null;\n  }\n}\n\nexport async function fetchCaseStudies() {\n  try {\n    const response = await fetch('/data/caseStudies.json');\n    if (!response.ok) {\n      throw new Error('Failed to fetch case studies data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching case studies:', error);\n    return null;\n  }\n}\n\nexport async function fetchTools() {\n  try {\n    const response = await fetch('/data/tools.json');\n    if (!response.ok) {\n      throw new Error('Failed to fetch tools data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching tools:', error);\n    return null;\n  }\n}\n\nexport async function fetchTestimonials() {\n  try {\n    const response = await fetch('/data/testimonials.json');\n    if (!response.ok) {\n      throw new Error('Failed to fetch testimonials data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching testimonials:', error);\n    return null;\n  }\n}\n\nexport async function fetchPosts(): Promise<Post[]> {\n  try {\n    const response = await fetch('/data/posts.json');\n    if (!response.ok) {\n      throw new Error('Failed to fetch posts data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching posts:', error);\n    return [];\n  }\n}\n\nexport async function fetchPostBySlug(slug: string): Promise<Post | undefined> {\n  try {\n    const posts = await fetchPosts();\n    return posts.find((p) => p.slug === slug);\n  } catch (error) {\n    console.error('Error fetching post by slug:', error);\n    return undefined;\n  }\n}\n","size_bytes":10324},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/validators.ts":{"content":"import { z } from 'zod';\n\nexport const contactFormSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(100, 'Name too long'),\n  email: z.string().email('Invalid email address'),\n  company: z.string().max(100, 'Company name too long').optional(),\n  role: z.string().optional(),\n  message: z.string().min(10, 'Message must be at least 10 characters').max(2000, 'Message too long'),\n  timeframe: z.string().optional(),\n  budget: z.string().optional(),\n  honeypot: z.string().max(0, 'Bot detected').optional(),\n});\n\nexport type ContactFormData = z.infer<typeof contactFormSchema>;\n\nexport const downloadFormSchema = z.object({\n  template_name: z.string().min(1, 'Template name is required'),\n  email: z.string().email('Invalid email address'),\n  company: z.string().max(100, 'Company name too long').optional(),\n});\n\nexport type DownloadFormData = z.infer<typeof downloadFormSchema>;\n","size_bytes":897},"client/src/pages/About.tsx":{"content":"import { useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { ArrowRight, BarChart3, Bot, Database, Brain, CheckCircle, Users, Award, Clock, Target } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport Section from '@/components/Section';\nimport { trackPageView, trackButtonClick } from '@/lib/analytics';\n\nexport default function About() {\n  useEffect(() => {\n    trackPageView('about');\n  }, []);\n\n  const expertise = [\n    {\n      title: 'Financial Analytics',\n      description: 'KPI dashboards, margin analysis, and budget planning automation',\n      icon: <BarChart3 className=\"h-6 w-6\" />,\n      color: 'primary'\n    },\n    {\n      title: 'Process Automation',\n      description: 'VBA scripting, Power Automate flows, and report generation',\n      icon: <Bot className=\"h-6 w-6\" />,\n      color: 'accent'\n    },\n    {\n      title: 'Data Integration',\n      description: 'Power Query pipelines and multi-source data consolidation',\n      icon: <Database className=\"h-6 w-6\" />,\n      color: 'success'\n    },\n    {\n      title: 'Decision Systems',\n      description: 'Scenario modeling, optimization, and predictive analytics',\n      icon: <Brain className=\"h-6 w-6\" />,\n      color: 'purple'\n    }\n  ];\n\n  const companyStats = [\n    { value: '50+', label: 'Projects Completed', icon: <Target className=\"h-6 w-6\" /> },\n    { value: '200+', label: 'Hours Saved Weekly', icon: <Clock className=\"h-6 w-6\" /> },\n    { value: '95%', label: 'Client Satisfaction', icon: <Award className=\"h-6 w-6\" /> },\n    { value: '24hr', label: 'Response Time', icon: <Users className=\"h-6 w-6\" /> },\n  ];\n\n  const values = [\n    {\n      title: 'Automation First',\n      description: 'We believe every manual process is an opportunity for improvement. Our solutions prioritize automation to eliminate repetitive tasks and reduce human error.',\n      icon: <Bot className=\"h-8 w-8\" />\n    },\n    {\n      title: 'Data-Driven Decisions',\n      description: 'Numbers tell stories, but only when properly analyzed. We transform raw data into actionable insights that drive strategic decisions.',\n      icon: <BarChart3 className=\"h-8 w-8\" />\n    },\n    {\n      title: 'Practical Excellence',\n      description: 'We build on familiar tools like Excel and Power BI, ensuring solutions are powerful yet accessible to your entire team.',\n      icon: <CheckCircle className=\"h-8 w-8\" />\n    }\n  ];\n\n  return (\n    <div className=\"pt-16\">\n      {/* Header */}\n      <Section className=\"section-padding bg-gradient-to-b from-muted/50 to-transparent\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <motion.h1 \n              className=\"font-display text-5xl md:text-6xl font-bold mb-6\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              data-testid=\"about-page-title\"\n            >\n              About <span className=\"gradient-text\">TIAI Solutions</span>\n            </motion.h1>\n            <motion.p \n              className=\"text-xl text-muted-foreground max-w-3xl mx-auto\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              data-testid=\"about-page-subtitle\"\n            >\n              We're automation specialists who believe data should drive decisions, not consume time.\n            </motion.p>\n          </div>\n        </div>\n      </Section>\n\n      {/* Mission and Story */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8 }}\n            >\n              <h2 className=\"font-display text-4xl font-bold mb-6\" data-testid=\"mission-title\">\n                Our Mission\n              </h2>\n              <p className=\"text-muted-foreground mb-6\" data-testid=\"mission-description\">\n                At TIAI Solutions, we transform how businesses interact with their data. Our automation-first approach \n                eliminates manual processes, reduces errors, and provides real-time insights that drive strategic decisions.\n              </p>\n              <p className=\"text-muted-foreground mb-8\">\n                We specialize in creating sophisticated yet user-friendly automation solutions using familiar tools \n                like Excel, Power BI, and VBA, combined with modern cloud technologies for scalable, reliable performance.\n              </p>\n              \n              <div className=\"grid grid-cols-2 gap-6\">\n                {companyStats.map((stat, index) => (\n                  <motion.div\n                    key={index}\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                    className=\"text-center\"\n                    data-testid={`company-stat-${index}`}\n                  >\n                    <div className=\"text-primary mb-2\">{stat.icon}</div>\n                    <div className=\"text-2xl font-bold text-primary mb-1\">{stat.value}</div>\n                    <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n            \n            <motion.div\n              initial={{ opacity: 0, x: 50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              className=\"space-y-6\"\n            >\n              <h3 className=\"font-display text-2xl font-bold mb-6\" data-testid=\"expertise-title\">\n                Our Expertise\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {expertise.map((item, index) => (\n                  <motion.div\n                    key={index}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.6, delay: index * 0.1 }}\n                    className=\"flex items-start p-4 bg-card rounded-lg shadow-sm\"\n                    data-testid={`expertise-item-${index}`}\n                  >\n                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center mr-4 bg-${item.color}/10 text-${item.color}`}>\n                      {item.icon}\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">{item.title}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n      </Section>\n\n      {/* Values */}\n      <Section className=\"section-padding bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-display text-4xl md:text-5xl font-bold mb-6\" data-testid=\"values-title\">\n              What Drives Us\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"values-subtitle\">\n              Our core principles guide every project and client relationship.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {values.map((value, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 50 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.2 }}\n              >\n                <Card className=\"h-full text-center p-8\" data-testid={`value-card-${index}`}>\n                  <CardHeader>\n                    <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <div className=\"text-primary\">{value.icon}</div>\n                    </div>\n                    <CardTitle className=\"font-display text-xl mb-4\">{value.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground\">{value.description}</p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </Section>\n\n      {/* Team Section */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-display text-4xl md:text-5xl font-bold mb-6\" data-testid=\"team-title\">\n              Meet the Team\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"team-subtitle\">\n              Experienced professionals with deep expertise in business automation and data analytics.\n            </p>\n          </div>\n          \n          <div className=\"bg-card p-12 rounded-2xl shadow-lg text-center\">\n            <div className=\"w-24 h-24 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Users className=\"h-12 w-12 text-primary\" />\n            </div>\n            <h3 className=\"font-display text-2xl font-bold mb-4\" data-testid=\"team-intro-title\">\n              Automation Specialists\n            </h3>\n            <p className=\"text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Our team combines deep technical expertise with practical business knowledge. We understand \n              both the complexities of enterprise data and the need for user-friendly solutions that teams \n              can actually adopt and maintain.\n            </p>\n            \n            <div className=\"grid md:grid-cols-3 gap-8 text-left\">\n              <div className=\"bg-muted/50 p-6 rounded-lg\">\n                <BarChart3 className=\"h-8 w-8 text-primary mb-4\" />\n                <h4 className=\"font-semibold mb-2\">Business Intelligence</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  15+ years in financial modeling, KPI design, and dashboard automation\n                </p>\n              </div>\n              \n              <div className=\"bg-muted/50 p-6 rounded-lg\">\n                <Bot className=\"h-8 w-8 text-accent mb-4\" />\n                <h4 className=\"font-semibold mb-2\">Process Automation</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Expert-level VBA, Power Query, and Power Automate implementation\n                </p>\n              </div>\n              \n              <div className=\"bg-muted/50 p-6 rounded-lg\">\n                <Brain className=\"h-8 w-8 text-green-500 mb-4\" />\n                <h4 className=\"font-semibold mb-2\">Advanced Analytics</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Statistical modeling, optimization, and predictive analytics expertise\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Section>\n\n      {/* CTA */}\n      <Section className=\"section-padding bg-muted/50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"bg-gradient-to-r from-primary/10 via-accent/5 to-purple-500/10 p-12 rounded-2xl\"\n            data-testid=\"about-cta-section\"\n          >\n            <h2 className=\"font-display text-3xl md:text-4xl font-bold mb-6\" data-testid=\"about-cta-title\">\n              Ready to Work Together?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8\" data-testid=\"about-cta-subtitle\">\n              Let's discuss how our automation expertise can transform your data processes.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\"\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                onClick={() => {\n                  trackButtonClick('start-conversation', 'about-cta');\n                  window.location.href = '/contact';\n                }}\n                data-testid=\"button-start-conversation\"\n              >\n                Start the Conversation\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                onClick={() => {\n                  trackButtonClick('view-case-studies-from-about', 'about-cta');\n                  window.location.href = '/case-studies';\n                }}\n                data-testid=\"button-view-case-studies-from-about\"\n              >\n                View Our Work\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </Section>\n    </div>\n  );\n}\n","size_bytes":13383},"client/src/pages/CaseStudies.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { ArrowRight, ExternalLink, Calendar, Users, Target } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport Section from '@/components/Section';\nimport TestimonialCard from '@/components/TestimonialCard';\nimport CaseStudyModal from '@/components/CaseStudyModal';\nimport { trackPageView, trackButtonClick } from '@/lib/analytics';\nimport { caseStudies, caseStudyStats } from '@/data/caseStudies';\n\nexport default function CaseStudies() {\n  const [selectedStudy, setSelectedStudy] = useState<string | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    trackPageView('case-studies');\n  }, []);\n\n  const handleLearnMore = (studyId: string) => {\n    setSelectedStudy(studyId);\n    setIsModalOpen(true);\n    trackButtonClick('case-study-details', 'case-studies');\n  };\n\n  const handleContactUs = (studyTitle: string) => {\n    trackButtonClick('contact-from-case-study', 'case-studies');\n    window.location.href = `/contact?interest=${encodeURIComponent(studyTitle)}`;\n  };\n\n  return (\n    <div className=\"pt-16\">\n      {/* Header */}\n      <Section className=\"section-padding bg-gradient-to-b from-muted/50 to-transparent\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <motion.h1 \n              className=\"font-display text-5xl md:text-6xl font-bold mb-6\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              data-testid=\"case-studies-page-title\"\n            >\n              Success <span className=\"gradient-text\">Stories</span>\n            </motion.h1>\n            <motion.p \n              className=\"text-xl text-muted-foreground max-w-3xl mx-auto\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              data-testid=\"case-studies-page-subtitle\"\n            >\n              Real automation solutions that transformed how our clients work with data.\n              See the measurable impact of our automation-first approach.\n            </motion.p>\n          </div>\n        </div>\n      </Section>\n\n      {/* Case Study Statistics */}\n      <Section className=\"py-16 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            {caseStudyStats.map((stat, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                className=\"text-center\"\n                data-testid={`case-study-stat-${index}`}\n              >\n                <div className=\"text-4xl font-bold text-primary mb-2\">{stat.value}</div>\n                <div className=\"font-semibold mb-1\">{stat.label}</div>\n                <div className=\"text-sm text-muted-foreground\">{stat.description}</div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </Section>\n\n      {/* Case Studies Grid */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {caseStudies.map((study, index) => (\n              <motion.div\n                key={study.id}\n                initial={{ opacity: 0, y: 50 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.2 }}\n              >\n                <Card \n                  className=\"h-full hover:shadow-xl transition-all duration-300 cursor-pointer\"\n                  onClick={() => handleLearnMore(study.id)}\n                  data-testid={`case-study-card-${study.id}`}\n                >\n                  <CardHeader>\n                    <div className={`w-12 h-12 bg-${study.color}/10 rounded-lg flex items-center justify-center mb-4`}>\n                      {study.icon}\n                    </div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {study.industry}\n                      </Badge>\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <Calendar className=\"h-4 w-4 mr-1\" />\n                        {study.timeline}\n                      </div>\n                    </div>\n                    <CardTitle className=\"font-display text-xl mb-2\" data-testid=\"case-study-title\">\n                      {study.title}\n                    </CardTitle>\n                    <p className=\"text-muted-foreground text-sm\" data-testid=\"case-study-subtitle\">\n                      {study.subtitle}\n                    </p>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <p className=\"text-muted-foreground mb-6\" data-testid=\"case-study-description\">\n                      {study.description}\n                    </p>\n                    \n                    <div className=\"space-y-4 mb-6\">\n                      {study.results.map((result, resultIndex) => (\n                        <div key={resultIndex} className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-muted-foreground\">{result.metric}</span>\n                          <span className=\"font-semibold\">{result.value}</span>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <div className=\"border-t pt-4\">\n                      <div className=\"flex flex-wrap gap-2 mb-4\">\n                        {study.technologies.slice(0, 3).map((tech, techIndex) => (\n                          <Badge \n                            key={techIndex} \n                            variant=\"outline\" \n                            className={`text-xs bg-${study.color}/10 text-${study.color} border-${study.color}/20`}\n                          >\n                            {tech}\n                          </Badge>\n                        ))}\n                        {study.technologies.length > 3 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{study.technologies.length - 3} more\n                          </Badge>\n                        )}\n                      </div>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        className={`w-full text-${study.color} hover:bg-${study.color}/10`}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleLearnMore(study.id);\n                        }}\n                        data-testid=\"button-view-case-study\"\n                      >\n                        View Case Study\n                        <ArrowRight className=\"ml-2 h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </Section>\n\n      {/* Detailed Case Study Modal/Section */}\n      {selectedStudy && (\n        <Section className=\"section-padding bg-muted/50\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            {(() => {\n              const study = caseStudies.find(s => s.id === selectedStudy);\n              if (!study) return null;\n\n              return (\n                <motion.div\n                  initial={{ opacity: 0, y: 50 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8 }}\n                  className=\"bg-card p-8 rounded-xl shadow-lg\"\n                  data-testid=\"case-study-detail\"\n                >\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div>\n                      <h2 className=\"font-display text-3xl font-bold mb-2\" data-testid=\"case-study-detail-title\">\n                        {study.title}\n                      </h2>\n                      <p className=\"text-muted-foreground\">{study.subtitle}</p>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      onClick={() => setSelectedStudy(null)}\n                      data-testid=\"button-close-case-study\"\n                    >\n                      ×\n                    </Button>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-3 gap-8 mb-8\">\n                    <div>\n                      <h3 className=\"font-semibold mb-3 flex items-center\">\n                        <Target className=\"h-5 w-5 mr-2 text-red-500\" />\n                        Challenge\n                      </h3>\n                      <p className=\"text-muted-foreground text-sm\">{study.challenge}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"font-semibold mb-3 flex items-center\">\n                        <Users className=\"h-5 w-5 mr-2 text-blue-500\" />\n                        Solution\n                      </h3>\n                      <p className=\"text-muted-foreground text-sm\">{study.solution}</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"font-semibold mb-3\">Results</h3>\n                      <div className=\"space-y-3\">\n                        {study.results.map((result, index) => (\n                          <div key={index} className=\"bg-muted/50 p-3 rounded-lg\">\n                            <div className={`text-lg font-bold text-${study.color} mb-1`}>\n                              {result.value}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">{result.description}</div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {study.clientQuote && (\n                    <div className=\"bg-muted/50 p-6 rounded-lg mb-8\">\n                      <blockquote className=\"text-muted-foreground italic mb-4\">\n                        \"{study.clientQuote.text}\"\n                      </blockquote>\n                      <div className=\"font-semibold\">\n                        {study.clientQuote.author}, {study.clientQuote.role}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex flex-wrap gap-2 mb-8\">\n                    {study.technologies.map((tech, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                        {tech}\n                      </Badge>\n                    ))}\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-4\">\n                    <Button\n                      className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                      onClick={() => handleContactUs(study.title)}\n                      data-testid=\"button-contact-similar-project\"\n                    >\n                      Start a Similar Project\n                      <ArrowRight className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => trackButtonClick('download-case-study', 'case-studies')}\n                      data-testid=\"button-download-case-study\"\n                    >\n                      <ExternalLink className=\"mr-2 h-4 w-4\" />\n                      Download Full Case Study\n                    </Button>\n                  </div>\n                </motion.div>\n              );\n            })()}\n          </div>\n        </Section>\n      )}\n\n      {/* CTA Section */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"bg-gradient-to-r from-primary/10 via-accent/5 to-purple-500/10 p-12 rounded-2xl\"\n            data-testid=\"case-studies-cta-section\"\n          >\n            <h2 className=\"font-display text-3xl md:text-4xl font-bold mb-6\" data-testid=\"case-studies-cta-title\">\n              Ready for Your Success Story?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8\" data-testid=\"case-studies-cta-subtitle\">\n              Let's discuss how we can create a similar transformation for your organization.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\"\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                onClick={() => trackButtonClick('start-project-from-cases', 'case-studies-cta')}\n                data-testid=\"button-start-project-from-cases\"\n              >\n                Start Your Project\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                onClick={() => trackButtonClick('view-tools-from-cases', 'case-studies-cta')}\n                data-testid=\"button-view-tools-from-cases\"\n              >\n                Explore Our Tools\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </Section>\n      \n      {/* Case Study Modal */}\n      <CaseStudyModal \n        open={isModalOpen}\n        onOpenChange={(open) => {\n          setIsModalOpen(open);\n          if (!open) setSelectedStudy(null);\n        }}\n        caseStudy={selectedStudy ? caseStudies.find(s => s.id === selectedStudy) : null}\n      />\n    </div>\n  );\n}\n","size_bytes":14314},"client/src/pages/Contact.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Mail, Phone, MapPin, Clock, ArrowRight } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport Section from '@/components/Section';\nimport ContactForm from '@/components/ContactForm';\nimport ScheduleCallModal from '@/components/ScheduleCallModal';\nimport { trackPageView, trackButtonClick } from '@/lib/analytics';\n\nexport default function Contact() {\n  const [isScheduleModalOpen, setIsScheduleModalOpen] = useState(false);\n\n  useEffect(() => {\n    trackPageView('contact');\n  }, []);\n\n  const contactInfo = [\n    {\n      icon: <Mail className=\"h-6 w-6\" />,\n      label: 'Email',\n      value: 'hello@tiai-solutions.com',\n      href: 'mailto:hello@tiai-solutions.com',\n      description: 'Primary contact for all inquiries'\n    },\n    {\n      icon: <Phone className=\"h-6 w-6\" />,\n      label: 'Phone',\n      value: '+1 (555) 123-4567',\n      href: 'tel:+15551234567',\n      description: 'Business hours: 9 AM - 6 PM PST'\n    },\n    {\n      icon: <MapPin className=\"h-6 w-6\" />,\n      label: 'Location',\n      value: 'San Francisco, CA',\n      href: '#',\n      description: 'Serving clients nationwide'\n    },\n    {\n      icon: <Clock className=\"h-6 w-6\" />,\n      label: 'Response Time',\n      value: '< 24 hours',\n      href: '#',\n      description: 'Typical response time for inquiries'\n    }\n  ];\n\n  const processSteps = [\n    {\n      step: '01',\n      title: 'Initial Consultation',\n      description: 'We discuss your current data challenges and automation goals in a 30-minute discovery call.',\n      duration: '30 minutes'\n    },\n    {\n      step: '02',\n      title: 'Assessment & Proposal',\n      description: 'Our team analyzes your needs and provides a detailed proposal with timeline and investment.',\n      duration: '2-3 days'\n    },\n    {\n      step: '03',\n      title: 'Project Kickoff',\n      description: 'We begin implementation with clear milestones and regular progress updates.',\n      duration: '1 week'\n    },\n    {\n      step: '04',\n      title: 'Delivery & Training',\n      description: 'Complete solution delivery with comprehensive training and documentation.',\n      duration: '2-8 weeks'\n    }\n  ];\n\n  return (\n    <div className=\"pt-16\">\n      {/* Header */}\n      <Section className=\"section-padding bg-gradient-to-b from-muted/50 to-transparent\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <motion.h1 \n              className=\"font-display text-5xl md:text-6xl font-bold mb-6\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              data-testid=\"contact-page-title\"\n            >\n              Start Your <span className=\"gradient-text\">Automation Journey</span>\n            </motion.h1>\n            <motion.p \n              className=\"text-xl text-muted-foreground max-w-3xl mx-auto\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              data-testid=\"contact-page-subtitle\"\n            >\n              Ready to transform your data processes? Let's discuss your automation needs and \n              create a solution that drives real results for your organization.\n            </motion.p>\n          </div>\n        </div>\n      </Section>\n\n      {/* Contact Form and Info */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-3 gap-12\">\n            {/* Contact Form */}\n            <div className=\"lg:col-span-2\">\n              <motion.div\n                initial={{ opacity: 0, x: -50 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8 }}\n              >\n                <h2 className=\"font-display text-3xl font-bold mb-6\" data-testid=\"contact-form-title\">\n                  Tell Us About Your Project\n                </h2>\n                <ContactForm />\n              </motion.div>\n            </div>\n\n            {/* Contact Information */}\n            <motion.div\n              initial={{ opacity: 0, x: 50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              className=\"space-y-6\"\n            >\n              <h3 className=\"font-display text-2xl font-bold mb-6\" data-testid=\"contact-info-title\">\n                Get in Touch\n              </h3>\n              \n              {contactInfo.map((info, index) => (\n                <Card key={index} className=\"hover:shadow-md transition-shadow duration-200\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                        <div className=\"text-primary\">{info.icon}</div>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold mb-1\">{info.label}</h4>\n                        {info.href.startsWith('mailto:') || info.href.startsWith('tel:') ? (\n                          <a \n                            href={info.href}\n                            className=\"text-primary hover:text-primary/80 font-medium\"\n                            data-testid={`contact-${info.label.toLowerCase()}`}\n                          >\n                            {info.value}\n                          </a>\n                        ) : (\n                          <div className=\"text-primary font-medium\" data-testid={`contact-${info.label.toLowerCase()}`}>\n                            {info.value}\n                          </div>\n                        )}\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          {info.description}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </motion.div>\n          </div>\n        </div>\n      </Section>\n\n      {/* Process Overview */}\n      <Section className=\"section-padding bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-display text-4xl md:text-5xl font-bold mb-6\" data-testid=\"process-title\">\n              How We Work Together\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"process-subtitle\">\n              Our proven process ensures successful automation implementation from discovery to delivery.\n            </p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"space-y-8\">\n              {processSteps.map((step, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, x: -50 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.1 }}\n                  className=\"flex items-start space-x-6\"\n                  data-testid={`process-step-${index + 1}`}\n                >\n                  <div className=\"flex-shrink-0 w-12 h-12 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-bold\">\n                    {step.step}\n                  </div>\n                  <div className=\"flex-1 bg-card p-6 rounded-lg shadow-sm\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-display text-xl font-bold\">{step.title}</h3>\n                      <span className=\"text-sm text-muted-foreground font-mono\">{step.duration}</span>\n                    </div>\n                    <p className=\"text-muted-foreground\">{step.description}</p>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </Section>\n\n      {/* FAQ Preview */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"bg-card p-12 rounded-2xl shadow-lg\"\n            data-testid=\"contact-faq-section\"\n          >\n            <h2 className=\"font-display text-3xl font-bold mb-6\" data-testid=\"contact-faq-title\">\n              Have Questions Before Starting?\n            </h2>\n            <p className=\"text-muted-foreground mb-8\" data-testid=\"contact-faq-subtitle\">\n              Check our FAQ section for common questions about our automation solutions and process.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                onClick={() => {\n                  trackButtonClick('view-faq', 'contact');\n                  window.location.href = '/services#faq';\n                }}\n                data-testid=\"button-view-faq\"\n              >\n                View FAQ\n              </Button>\n              <Button\n                size=\"lg\"\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                onClick={() => {\n                  trackButtonClick('schedule-call', 'contact');\n                  setIsScheduleModalOpen(true);\n                }}\n                data-testid=\"button-schedule-call\"\n              >\n                Schedule a Call\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </Section>\n      \n      {/* Schedule Call Modal */}\n      <ScheduleCallModal \n        open={isScheduleModalOpen}\n        onOpenChange={setIsScheduleModalOpen}\n        source=\"contact\"\n      />\n    </div>\n  );\n}\n","size_bytes":10224},"client/src/pages/Home.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Link } from 'wouter';\nimport { ArrowRight, Play, ChevronDown } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport Section from '@/components/Section';\nimport BeforeAfter from '@/components/BeforeAfter';\nimport ChartReveal from '@/components/ChartReveal';\nimport ServiceCard from '@/components/ServiceCard';\nimport TestimonialCard from '@/components/TestimonialCard';\nimport { trackPageView, trackButtonClick } from '@/lib/analytics';\nimport ScheduleCallModal from '@/components/ScheduleCallModal';\nimport { services } from '@/data/services';\nimport { testimonials } from '@/data/testimonials';\n\nexport default function Home() {\n  const [isScheduleModalOpen, setIsScheduleModalOpen] = useState(false);\n\n  useEffect(() => {\n    trackPageView('home');\n  }, []);\n\n  return (\n    <div className=\"pt-16\">\n      {/* Scene 1: Hero */}\n      <Section \n        id=\"hero\" \n        dataSection=\"hero\" \n        className=\"min-h-screen flex items-center justify-center relative particle-bg hero-gradient\"\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative z-10\">\n          <motion.div\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 1, ease: [0.25, 0.46, 0.45, 0.94] }}\n          >\n            <h1 className=\"font-display text-5xl md:text-7xl lg:text-8xl font-bold mb-6\" data-testid=\"hero-title\">\n              <span className=\"block\">From Data</span>\n              <span className=\"block gradient-text\">to Decisions</span>\n            </h1>\n          </motion.div>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.3 }}\n          >\n            <p className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto mb-12\" data-testid=\"hero-subtitle\">\n              Automation-first consulting that turns your numbers into momentum.\n            </p>\n          </motion.div>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.6 }}\n            className=\"flex flex-col sm:flex-row gap-4 justify-center\"\n          >\n            <Link href=\"/contact\">\n              <Button \n                size=\"lg\"\n                className=\"bg-primary text-primary-foreground px-8 py-4 text-lg font-semibold hover:bg-primary/90 transition-all transform hover:scale-105\"\n                onClick={() => trackButtonClick('start-project', 'hero')}\n                data-testid=\"button-start-project\"\n              >\n                Start a Project\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"border-border text-foreground px-8 py-4 text-lg font-semibold hover:bg-muted transition-all\"\n              onClick={() => trackButtonClick('see-dashboards', 'hero')}\n              data-testid=\"button-see-dashboards\"\n            >\n              <Play className=\"mr-2 h-5 w-5\" />\n              See Live Dashboards\n            </Button>\n          </motion.div>\n        </div>\n        \n        {/* Scroll Indicator */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 1, delay: 1.2 }}\n          className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\"\n        >\n          <motion.div\n            animate={{ y: [0, 10, 0] }}\n            transition={{ duration: 2, repeat: Infinity }}\n            data-testid=\"scroll-indicator\"\n          >\n            <ChevronDown className=\"text-muted-foreground h-6 w-6\" />\n          </motion.div>\n        </motion.div>\n      </Section>\n\n      {/* Scene 2: Problem → Shift */}\n      <Section \n        id=\"problem\" \n        dataSection=\"problem\" \n        className=\"section-padding bg-muted/50\"\n        delay={0.2}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-display text-4xl md:text-5xl font-bold mb-6\" data-testid=\"problem-title\">\n              Transform Your Data Chaos\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"problem-subtitle\">\n              Move from scattered spreadsheets to automated insights that drive action.\n            </p>\n          </div>\n          \n          <BeforeAfter />\n        </div>\n      </Section>\n\n      {/* Scene 3: Capabilities Carousel */}\n      <Section \n        id=\"capabilities\" \n        dataSection=\"capabilities\" \n        className=\"section-padding\"\n        delay={0.3}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-display text-4xl md:text-5xl font-bold mb-6\" data-testid=\"capabilities-title\">\n              Automated Intelligence\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"capabilities-subtitle\">\n              From KPI dashboards to cost control systems, we automate what matters most.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {services.capabilities.map((capability: any, index: number) => (\n              <ServiceCard\n                key={index}\n                title={capability.title}\n                description={capability.description}\n                features={capability.features}\n                icon={capability.icon}\n                color={capability.color as any}\n                ctaText=\"Learn More\"\n                onCTAClick={() => {\n                  trackButtonClick('capability-learn-more', 'capabilities');\n                  // Navigate to services page or show more details\n                }}\n                delay={index * 0.1}\n              />\n            ))}\n          </div>\n        </div>\n      </Section>\n\n      {/* Scene 4: Animated Charts */}\n      <Section \n        id=\"charts\" \n        dataSection=\"charts\" \n        className=\"section-padding bg-muted/50\"\n        delay={0.4}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-display text-4xl md:text-5xl font-bold mb-6\" data-testid=\"charts-title\">\n              Data That Drives Decisions\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"charts-subtitle\">\n              Interactive visualizations that reveal insights and guide strategic choices.\n            </p>\n          </div>\n          \n          <ChartReveal />\n        </div>\n      </Section>\n\n      {/* Scene 5: Social Proof + CTA */}\n      <Section \n        id=\"testimonials\" \n        dataSection=\"testimonials\" \n        className=\"section-padding\"\n        delay={0.5}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-display text-4xl md:text-5xl font-bold mb-6\" data-testid=\"testimonials-title\">\n              Trusted by Data Leaders\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"testimonials-subtitle\">\n              See how automation has transformed decision-making for our clients.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n            {testimonials.map((testimonial: any, index: number) => (\n              <TestimonialCard\n                key={index}\n                name={testimonial.name}\n                role={testimonial.role}\n                company={testimonial.company}\n                content={testimonial.content}\n                rating={testimonial.rating}\n                delay={index * 0.1}\n              />\n            ))}\n          </div>\n          \n          {/* Final CTA */}\n          <motion.div\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.6 }}\n            className=\"text-center bg-gradient-to-r from-primary/10 via-accent/5 to-purple-500/10 p-12 rounded-2xl\"\n            data-testid=\"final-cta-section\"\n          >\n            <h3 className=\"font-display text-3xl md:text-4xl font-bold mb-4\" data-testid=\"cta-title\">\n              Let's automate what slows you down\n            </h3>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\" data-testid=\"cta-subtitle\">\n              Transform your data processes from manual to automated. Get insights that drive decisions, not just reports.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/contact\">\n                <Button \n                  size=\"lg\"\n                  className=\"bg-primary text-primary-foreground px-8 py-4 text-lg font-semibold hover:bg-primary/90 transition-all transform hover:scale-105\"\n                  onClick={() => trackButtonClick('start-automation-journey', 'final-cta')}\n                  data-testid=\"button-start-automation-journey\"\n                >\n                  Start Your Automation Journey\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                className=\"border-border text-foreground px-8 py-4 text-lg font-semibold hover:bg-muted transition-all\"\n                onClick={() => {\n                  trackButtonClick('schedule-demo', 'final-cta');\n                  setIsScheduleModalOpen(true);\n                }}\n                data-testid=\"button-schedule-demo\"\n              >\n                Schedule a Demo\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </Section>\n      \n      {/* Schedule Call Modal */}\n      <ScheduleCallModal \n        open={isScheduleModalOpen}\n        onOpenChange={setIsScheduleModalOpen}\n        source=\"home\"\n      />\n    </div>\n  );\n}\n","size_bytes":10377},"client/src/pages/Services.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Check, ArrowRight, HelpCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport Section from '@/components/Section';\nimport ServiceCard from '@/components/ServiceCard';\nimport { trackPageView, trackButtonClick } from '@/lib/analytics';\nimport ScheduleCallModal from '@/components/ScheduleCallModal';\nimport { services, faqItems } from '@/data/services';\n\nexport default function Services() {\n  const [isScheduleModalOpen, setIsScheduleModalOpen] = useState(false);\n  \n  useEffect(() => {\n    trackPageView('services');\n  }, []);\n\n  const handleServiceCTA = (tierName: string) => {\n    trackButtonClick(`service-${tierName.toLowerCase()}`, 'services');\n    // Navigate to contact with pre-filled service type\n    window.location.href = `/contact?service=${encodeURIComponent(tierName)}`;\n  };\n\n  return (\n    <div className=\"pt-16\">\n      {/* Header */}\n      <Section className=\"section-padding bg-gradient-to-b from-muted/50 to-transparent\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <motion.h1 \n              className=\"font-display text-5xl md:text-6xl font-bold mb-6\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              data-testid=\"services-page-title\"\n            >\n              Automation <span className=\"gradient-text\">Tiers</span>\n            </motion.h1>\n            <motion.p \n              className=\"text-xl text-muted-foreground max-w-3xl mx-auto\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              data-testid=\"services-page-subtitle\"\n            >\n              From essential insights to advanced decision systems, we scale with your needs.\n              Each tier builds upon the previous, creating a comprehensive automation ecosystem.\n            </motion.p>\n          </div>\n        </div>\n      </Section>\n\n      {/* Service Tiers */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {services.tiers.map((tier, index) => (\n              <ServiceCard\n                key={index}\n                title={tier.title}\n                description={tier.description}\n                features={tier.features}\n                icon={tier.icon}\n                color={tier.color as any}\n                isPopular={tier.isPopular}\n                ctaText={tier.ctaText}\n                onCTAClick={() => handleServiceCTA(tier.title)}\n                delay={index * 0.2}\n              />\n            ))}\n          </div>\n        </div>\n      </Section>\n\n      {/* Process Timeline */}\n      <Section className=\"section-padding bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-display text-4xl md:text-5xl font-bold mb-6\" data-testid=\"process-title\">\n              Our Automation Process\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"process-subtitle\">\n              A systematic approach to transforming your data operations.\n            </p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"space-y-8\">\n              {[\n                {\n                  step: '01',\n                  title: 'Assessment & Planning',\n                  description: 'We analyze your current data processes, identify automation opportunities, and create a detailed implementation roadmap.',\n                  duration: '1-2 weeks'\n                },\n                {\n                  step: '02',\n                  title: 'Foundation Building',\n                  description: 'Set up clean data sources, establish KPI frameworks, and create the infrastructure for automation.',\n                  duration: '2-3 weeks'\n                },\n                {\n                  step: '03',\n                  title: 'Automation Implementation',\n                  description: 'Deploy automated workflows, create dynamic dashboards, and implement monitoring systems.',\n                  duration: '3-6 weeks'\n                },\n                {\n                  step: '04',\n                  title: 'Testing & Optimization',\n                  description: 'Validate accuracy, optimize performance, and train your team on the new automated systems.',\n                  duration: '1-2 weeks'\n                },\n                {\n                  step: '05',\n                  title: 'Launch & Support',\n                  description: 'Go live with full automation and provide ongoing support and enhancements.',\n                  duration: 'Ongoing'\n                }\n              ].map((phase, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, x: -50 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.1 }}\n                  className=\"flex items-start space-x-6\"\n                  data-testid={`process-step-${index + 1}`}\n                >\n                  <div className=\"flex-shrink-0 w-12 h-12 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-bold\">\n                    {phase.step}\n                  </div>\n                  <div className=\"flex-1 bg-card p-6 rounded-lg shadow-sm\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-display text-xl font-bold\">{phase.title}</h3>\n                      <span className=\"text-sm text-muted-foreground font-mono\">{phase.duration}</span>\n                    </div>\n                    <p className=\"text-muted-foreground\">{phase.description}</p>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </Section>\n\n      {/* FAQ */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-display text-4xl md:text-5xl font-bold mb-6\" data-testid=\"faq-title\">\n              Frequently Asked Questions\n            </h2>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"faq-subtitle\">\n              Everything you need to know about our automation solutions.\n            </p>\n          </div>\n          \n          <Accordion type=\"single\" collapsible className=\"space-y-4\">\n            {faqItems.map((item, index) => (\n              <AccordionItem \n                key={index}\n                value={`item-${index}`}\n                className=\"bg-card border border-border rounded-lg px-6\"\n                data-testid={`faq-item-${index}`}\n              >\n                <AccordionTrigger className=\"text-left font-semibold hover:no-underline\">\n                  <div className=\"flex items-center\">\n                    <HelpCircle className=\"h-5 w-5 text-primary mr-3 flex-shrink-0\" />\n                    {item.question}\n                  </div>\n                </AccordionTrigger>\n                <AccordionContent className=\"text-muted-foreground pt-4\">\n                  {item.answer}\n                </AccordionContent>\n              </AccordionItem>\n            ))}\n          </Accordion>\n        </div>\n      </Section>\n\n      {/* CTA */}\n      <Section className=\"section-padding bg-muted/50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"bg-card p-12 rounded-2xl shadow-lg\"\n            data-testid=\"services-cta-section\"\n          >\n            <h2 className=\"font-display text-3xl md:text-4xl font-bold mb-6\" data-testid=\"services-cta-title\">\n              Ready to Start Your Automation Journey?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8\" data-testid=\"services-cta-subtitle\">\n              Choose the tier that fits your needs or let us recommend the best approach for your organization.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\"\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                onClick={() => {\n                  trackButtonClick('get-recommendation', 'services-cta');\n                  setIsScheduleModalOpen(true);\n                }}\n                data-testid=\"button-get-recommendation\"\n              >\n                Get a Custom Recommendation\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                onClick={() => {\n                  trackButtonClick('view-case-studies', 'services-cta');\n                  window.location.href = '/case-studies';\n                }}\n                data-testid=\"button-view-case-studies\"\n              >\n                View Case Studies\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </Section>\n      \n      {/* Schedule Call Modal */}\n      <ScheduleCallModal \n        open={isScheduleModalOpen}\n        onOpenChange={setIsScheduleModalOpen}\n        source=\"services\"\n      />\n    </div>\n  );\n}\n","size_bytes":9875},"client/src/pages/Tools.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Download, Filter, Search, ArrowRight, Star, Calendar, HardDrive } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport Section from '@/components/Section';\nimport { trackPageView, trackButtonClick, trackDownload } from '@/lib/analytics';\nimport { tools, toolCategories, toolStats, type Tool } from '@/data/tools';\nimport { api } from '@/lib/api';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Tools() {\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filteredTools, setFilteredTools] = useState<Tool[]>(tools);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    trackPageView('tools');\n  }, []);\n\n  useEffect(() => {\n    let filtered = tools;\n\n    if (selectedCategory !== 'All') {\n      filtered = filtered.filter(tool => tool.category === selectedCategory);\n    }\n\n    if (searchQuery) {\n      filtered = filtered.filter(tool => \n        tool.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        tool.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        tool.features.some(feature => feature.toLowerCase().includes(searchQuery.toLowerCase()))\n      );\n    }\n\n    setFilteredTools(filtered);\n  }, [selectedCategory, searchQuery]);\n\n  const handleDownload = async (tool: Tool) => {\n    trackDownload(tool.name);\n    trackButtonClick('download-template', 'tools');\n    \n    // Track download with API\n    try {\n      await api.download({\n        template_name: tool.name,\n        email: 'user@example.com', // In real app, this would come from auth or form\n        company: 'Demo User'\n      });\n    } catch (error) {\n      console.error('Download tracking failed:', error);\n    }\n\n    toast({\n      title: 'Download Started',\n      description: `${tool.name} is being prepared for download.`,\n    });\n\n    // In a real implementation, this would trigger an actual file download\n    // For demo purposes, we'll just show the success message\n  };\n\n  const getColorClasses = (color: string) => {\n    const colorMap = {\n      primary: 'bg-primary/10 text-primary border-primary/20',\n      accent: 'bg-accent/10 text-accent border-accent/20',\n      success: 'bg-green-500/10 text-green-500 border-green-500/20',\n      purple: 'bg-purple-500/10 text-purple-500 border-purple-500/20',\n      orange: 'bg-orange-500/10 text-orange-500 border-orange-500/20',\n      blue: 'bg-blue-500/10 text-blue-500 border-blue-500/20',\n    };\n    return colorMap[color as keyof typeof colorMap] || colorMap.primary;\n  };\n\n  return (\n    <div className=\"pt-16\">\n      {/* Header */}\n      <Section className=\"section-padding bg-gradient-to-b from-muted/50 to-transparent\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <motion.h1 \n              className=\"font-display text-5xl md:text-6xl font-bold mb-6\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              data-testid=\"tools-page-title\"\n            >\n              Tools & <span className=\"gradient-text\">Templates</span>\n            </motion.h1>\n            <motion.p \n              className=\"text-xl text-muted-foreground max-w-3xl mx-auto\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              data-testid=\"tools-page-subtitle\"\n            >\n              Ready-to-use automation tools and templates to jumpstart your data transformation.\n              Professional-grade solutions you can implement immediately.\n            </motion.p>\n          </div>\n\n          {/* Statistics */}\n          <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n            {toolStats.map((stat, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 + 0.4 }}\n                className=\"text-center\"\n                data-testid={`tool-stat-${index}`}\n              >\n                <div className=\"text-3xl font-bold text-primary mb-2\">{stat.value}</div>\n                <div className=\"font-semibold mb-1\">{stat.label}</div>\n                <div className=\"text-sm text-muted-foreground\">{stat.description}</div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </Section>\n\n      {/* Filters and Search */}\n      <Section className=\"py-8 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n            <div className=\"flex items-center space-x-4 w-full md:w-auto\">\n              <div className=\"relative flex-1 md:w-80\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search tools and templates...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"search-tools\"\n                />\n              </div>\n            </div>\n\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full md:w-48\" data-testid=\"filter-category\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {toolCategories.map(category => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </Section>\n\n      {/* Tools Grid */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {filteredTools.length === 0 ? (\n            <div className=\"text-center py-16\">\n              <div className=\"text-muted-foreground mb-4\">No tools found matching your criteria</div>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setSearchQuery('');\n                  setSelectedCategory('All');\n                }}\n                data-testid=\"button-clear-filters\"\n              >\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredTools.map((tool, index) => (\n                <motion.div\n                  key={tool.id}\n                  initial={{ opacity: 0, y: 50 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.1 }}\n                >\n                  <Card \n                    className=\"h-full hover:shadow-xl transition-all duration-300 relative\"\n                    data-testid={`tool-card-${tool.id}`}\n                  >\n                    {tool.isPopular && (\n                      <div className=\"absolute -top-3 left-4 bg-primary text-primary-foreground text-xs px-3 py-1 rounded-full z-10\">\n                        POPULAR\n                      </div>\n                    )}\n                    \n                    <CardHeader>\n                      <div className={`w-12 h-12 rounded-lg flex items-center justify-center mb-4 ${getColorClasses(tool.color)}`}>\n                        {tool.icon}\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between mb-2\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {tool.category}\n                        </Badge>\n                        <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                          <HardDrive className=\"h-3 w-3\" />\n                          <span>{tool.fileSize}</span>\n                        </div>\n                      </div>\n                      \n                      <CardTitle className=\"font-display text-xl mb-2\" data-testid=\"tool-name\">\n                        {tool.name}\n                      </CardTitle>\n                      <p className=\"text-muted-foreground text-sm\" data-testid=\"tool-description\">\n                        {tool.description}\n                      </p>\n                    </CardHeader>\n                    \n                    <CardContent className=\"flex-1 flex flex-col\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold mb-3\">Features:</h4>\n                        <ul className=\"space-y-2 mb-6\">\n                          {tool.features.map((feature, featureIndex) => (\n                            <li key={featureIndex} className=\"flex items-start text-sm\">\n                              <Star className=\"h-4 w-4 text-yellow-400 mr-2 mt-0.5 flex-shrink-0\" />\n                              <span className=\"text-muted-foreground\">{feature}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n\n                      <div className=\"border-t pt-4\">\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-4\">\n                          <div className=\"flex items-center\">\n                            <Calendar className=\"h-3 w-3 mr-1\" />\n                            Updated {new Date(tool.lastUpdated).toLocaleDateString()}\n                          </div>\n                        </div>\n                        \n                        <Button\n                          className={`w-full ${getColorClasses(tool.color).replace(/border-\\w+-\\w+\\/\\d+/, '')}`}\n                          onClick={() => handleDownload(tool)}\n                          data-testid=\"button-download-tool\"\n                        >\n                          <Download className=\"mr-2 h-4 w-4\" />\n                          Get Template\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          )}\n        </div>\n      </Section>\n\n      {/* Newsletter Signup */}\n      <Section className=\"section-padding bg-muted/50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"bg-card p-12 rounded-2xl shadow-lg\"\n            data-testid=\"tools-newsletter-section\"\n          >\n            <h2 className=\"font-display text-3xl font-bold mb-4\" data-testid=\"newsletter-title\">\n              Get New Tools First\n            </h2>\n            <p className=\"text-muted-foreground mb-8\" data-testid=\"newsletter-subtitle\">\n              Subscribe to receive new automation tools and templates as soon as they're released.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center max-w-md mx-auto\">\n              <Input\n                placeholder=\"Enter your email\"\n                type=\"email\"\n                className=\"flex-1\"\n                data-testid=\"input-newsletter-email\"\n              />\n              <Button\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                onClick={() => trackButtonClick('newsletter-signup', 'tools')}\n                data-testid=\"button-newsletter-signup\"\n              >\n                Subscribe\n              </Button>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-4\">\n              No spam, unsubscribe anytime. We respect your privacy.\n            </p>\n          </motion.div>\n        </div>\n      </Section>\n    </div>\n  );\n}\n","size_bytes":12488},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/Chart.tsx":{"content":"import React, { useRef, useEffect, useState } from 'react';\nimport * as echarts from 'echarts';\n\ninterface ChartProps {\n  options: any;\n  height?: string | number;\n  width?: string | number;\n  className?: string;\n}\n\nconst Chart: React.FC<ChartProps> = ({ \n  options, \n  height = '400px', \n  width = '100%', \n  className = '' \n}) => {\n  const chartRef = useRef<HTMLDivElement>(null);\n  const chartInstance = useRef<echarts.ECharts | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (chartRef.current && options) {\n      // Initialize chart\n      chartInstance.current = echarts.init(chartRef.current);\n      \n      // Enhanced options with animations and mobile optimization\n      const animatedOptions = {\n        ...options,\n        animation: true,\n        animationDuration: 2000,\n        animationEasing: 'cubicOut',\n        animationDelay: (idx: number) => idx * 100,\n        animationDurationUpdate: 1000,\n        animationEasingUpdate: 'cubicInOut',\n        // Mobile-friendly configurations\n        grid: {\n          ...options.grid,\n          left: window.innerWidth < 768 ? '10%' : '3%',\n          right: window.innerWidth < 768 ? '10%' : '4%',\n          bottom: window.innerWidth < 768 ? '15%' : '3%',\n          top: window.innerWidth < 768 ? '15%' : '60',\n          containLabel: true,\n        },\n        // Enhanced tooltip for mobile\n        tooltip: {\n          ...options.tooltip,\n          trigger: 'axis',\n          backgroundColor: 'rgba(50, 50, 50, 0.95)',\n          borderWidth: 0,\n          textStyle: {\n            color: '#fff',\n            fontSize: window.innerWidth < 768 ? 12 : 14,\n          },\n          position: function(pt: number[]) {\n            // Better positioning for mobile\n            if (window.innerWidth < 768) {\n              return [pt[0], '10%'];\n            }\n            return null;\n          },\n        },\n        series: options.series?.map((series: any) => ({\n          ...series,\n          animation: true,\n          animationDuration: 2000,\n          animationEasing: 'elasticOut',\n          animationDelay: (idx: number) => idx * 150,\n          // Enhanced animation for different chart types\n          ...(series.type === 'line' && {\n            animationDuration: 3000,\n            animationEasing: 'cubicOut',\n          }),\n          ...(series.type === 'bar' && {\n            animationDuration: 1500,\n            animationEasing: 'bounceOut',\n            animationDelay: (idx: number) => idx * 100,\n          }),\n        }))\n      };\n      \n      // Set options with animations\n      chartInstance.current.setOption(animatedOptions);\n      setIsLoading(false);\n\n      // Handle window resize\n      const handleResize = () => {\n        if (chartInstance.current) {\n          chartInstance.current.resize();\n        }\n      };\n\n      window.addEventListener('resize', handleResize);\n\n      return () => {\n        window.removeEventListener('resize', handleResize);\n        if (chartInstance.current) {\n          chartInstance.current.dispose();\n        }\n      };\n    }\n  }, [options]);\n\n  // Update chart when options change with smooth transitions\n  useEffect(() => {\n    if (chartInstance.current && options) {\n      const animatedOptions = {\n        ...options,\n        animation: true,\n        animationDuration: 1500,\n        animationEasing: 'cubicInOut',\n        animationDurationUpdate: 1200,\n        animationEasingUpdate: 'cubicOut',\n        series: options.series?.map((series: any, seriesIndex: number) => ({\n          ...series,\n          animation: true,\n          animationDuration: 1200,\n          animationEasing: 'cubicOut',\n          animationDelay: seriesIndex * 200,\n          animationDurationUpdate: 800,\n          animationEasingUpdate: 'cubicInOut',\n        }))\n      };\n      \n      // Use merge mode for smooth transitions\n      chartInstance.current.setOption(animatedOptions, {\n        notMerge: false,\n        lazyUpdate: false,\n        silent: false\n      });\n    }\n  }, [options]);\n\n  return (\n    <div className={`relative ${className}`}>\n      {isLoading && (\n        <div \n          className=\"absolute inset-0 flex items-center justify-center bg-muted/30 rounded-lg\"\n          style={{ height, width }}\n        >\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      )}\n      <div\n        ref={chartRef}\n        style={{ height, width }}\n        className=\"rounded-lg\"\n      />\n    </div>\n  );\n};\n\nexport default Chart;","size_bytes":4518},"client/src/components/ScheduleCallModal.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Calendar, Clock, User, Building, MessageSquare, Download } from 'lucide-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { createCall } from '@/lib/api';\nimport type { CallRequest } from '../types';\n\nconst scheduleSchema = z.object({\n  full_name: z.string().min(2, 'Full name is required'),\n  email: z.string().email('Invalid email address'),\n  company: z.string().optional(),\n  notes: z.string().optional(),\n  date: z.string().min(1, 'Please select a date'),\n  time: z.string().min(1, 'Please select a time'),\n  duration: z.string().default('30'),\n  timezone: z.string().min(1, 'Timezone is required'),\n});\n\ntype ScheduleForm = z.infer<typeof scheduleSchema>;\n\ninterface ScheduleCallModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  source?: string;\n}\n\n// Generate time slots (9 AM - 5 PM, 30-minute intervals)\nconst generateTimeSlots = () => {\n  const slots = [];\n  for (let hour = 9; hour < 17; hour++) {\n    for (let minute = 0; minute < 60; minute += 30) {\n      const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n      const display = new Date(`2000-01-01T${time}`).toLocaleTimeString('en-US', {\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true,\n      });\n      slots.push({ value: time, label: display });\n    }\n  }\n  return slots;\n};\n\nconst timeSlots = generateTimeSlots();\n\n// Get user's timezone\nconst getUserTimezone = () => {\n  return Intl.DateTimeFormat().resolvedOptions().timeZone;\n};\n\n// Generate ICS file content\nconst generateICS = (callRequest: CallRequest, callId: string) => {\n  const start = new Date(callRequest.start_at).toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';\n  const end = new Date(callRequest.end_at).toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';\n  const now = new Date().toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';\n  \n  return `BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//TIAI Solutions//Schedule Call//EN\nBEGIN:VEVENT\nUID:tiai-call-${callId}@tiai-solutions.com\nDTSTAMP:${now}\nDTSTART:${start}\nDTEND:${end}\nSUMMARY:Intro Call — TIAI Solutions\nDESCRIPTION:Discovery call to discuss your automation needs.${callRequest.notes ? '\\\\n\\\\nNotes: ' + callRequest.notes : ''}\nLOCATION:Online (details will be sent via email)\nSTATUS:CONFIRMED\nTRANSP:OPAQUE\nEND:VEVENT\nEND:VCALENDAR`;\n};\n\n// Download ICS file\nconst downloadICS = (content: string, filename: string) => {\n  const blob = new Blob([content], { type: 'text/calendar;charset=utf-8' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\n\nexport default function ScheduleCallModal({ \n  open, \n  onOpenChange,\n  source = 'website' \n}: ScheduleCallModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [callId, setCallId] = useState<string | null>(null);\n  const [submittedRequest, setSubmittedRequest] = useState<CallRequest | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<ScheduleForm>({\n    resolver: zodResolver(scheduleSchema),\n    defaultValues: {\n      full_name: '',\n      email: '',\n      company: '',\n      notes: '',\n      date: '',\n      time: '',\n      duration: '30',\n      timezone: getUserTimezone(),\n    },\n  });\n\n  const onSubmit = async (values: ScheduleForm) => {\n    setIsSubmitting(true);\n    \n    try {\n      // Combine date and time into start/end timestamps\n      const startDateTime = new Date(`${values.date}T${values.time}:00`);\n      const endDateTime = new Date(startDateTime.getTime() + parseInt(values.duration) * 60 * 1000);\n      \n      const callRequest: CallRequest = {\n        full_name: values.full_name,\n        email: values.email,\n        company: values.company,\n        notes: values.notes,\n        timezone: values.timezone,\n        start_at: startDateTime.toISOString(),\n        end_at: endDateTime.toISOString(),\n        source,\n      };\n\n      const id = await createCall(callRequest);\n      \n      setCallId(id);\n      setSubmittedRequest(callRequest);\n      setIsSuccess(true);\n      \n      toast({\n        title: 'Call Scheduled Successfully!',\n        description: 'We\\'ll send you a calendar invitation and confirmation email shortly.',\n      });\n      \n    } catch (error) {\n      console.error('Error scheduling call:', error);\n      toast({\n        title: 'Scheduling Failed',\n        description: 'Please try again or contact us directly at hello@tiai-solutions.com',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleDownloadCalendar = () => {\n    if (callId && submittedRequest) {\n      const icsContent = generateICS(submittedRequest, callId);\n      downloadICS(icsContent, 'TIAI-Call.ics');\n      \n      toast({\n        title: 'Calendar Event Downloaded',\n        description: 'The calendar event has been saved to your downloads.',\n      });\n    }\n  };\n\n  const handleClose = () => {\n    setIsSuccess(false);\n    setCallId(null);\n    setSubmittedRequest(null);\n    form.reset();\n    onOpenChange(false);\n  };\n\n  // Get minimum date (today)\n  const today = new Date().toISOString().split('T')[0];\n  \n  // Get maximum date (30 days from now)\n  const maxDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n  if (isSuccess) {\n    return (\n      <Dialog open={open} onOpenChange={handleClose}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"schedule-success-modal\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center text-green-600\">\n              Call Scheduled Successfully! 🎉\n            </DialogTitle>\n            <DialogDescription className=\"text-center\">\n              We'll send you a calendar invitation and confirmation email shortly.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex flex-col gap-4 pt-4\">\n            <Button\n              onClick={handleDownloadCalendar}\n              className=\"w-full\"\n              data-testid=\"button-download-calendar\"\n            >\n              <Download className=\"mr-2 h-4 w-4\" />\n              Add to Calendar\n            </Button>\n            \n            <div className=\"text-center text-sm text-muted-foreground\">\n              <p>Didn't receive an email? Contact us at:</p>\n              <a \n                href=\"mailto:hello@tiai-solutions.com\" \n                className=\"text-primary hover:underline\"\n                data-testid=\"link-contact-email\"\n              >\n                hello@tiai-solutions.com\n              </a>\n            </div>\n            \n            <Button variant=\"outline\" onClick={handleClose} data-testid=\"button-close-success\">\n              Close\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\" data-testid=\"schedule-call-modal\">\n        <DialogHeader>\n          <DialogTitle>Schedule a Call</DialogTitle>\n          <DialogDescription>\n            Book a 30-minute discovery call to discuss your automation needs.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            {/* Personal Information */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"full_name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name *</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input \n                          placeholder=\"John Doe\" \n                          className=\"pl-10\" \n                          {...field} \n                          data-testid=\"input-full-name\"\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\" \n                        placeholder=\"john@company.com\" \n                        {...field} \n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"company\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Company</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Building className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input \n                        placeholder=\"Your Company\" \n                        className=\"pl-10\" \n                        {...field} \n                        data-testid=\"input-company\"\n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Date & Time Selection */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date *</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Calendar className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input \n                          type=\"date\" \n                          min={today}\n                          max={maxDate}\n                          className=\"pl-10\" \n                          {...field} \n                          data-testid=\"input-date\"\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"time\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Time *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Clock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground z-10\" />\n                          <SelectTrigger className=\"pl-10\" data-testid=\"select-time\">\n                            <SelectValue placeholder=\"Select time\" />\n                          </SelectTrigger>\n                        </div>\n                      </FormControl>\n                      <SelectContent>\n                        {timeSlots.map((slot) => (\n                          <SelectItem key={slot.value} value={slot.value}>\n                            {slot.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"timezone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Timezone</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      readOnly\n                      className=\"bg-muted\"\n                      data-testid=\"input-timezone\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <MessageSquare className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Textarea \n                        placeholder=\"Tell us about your automation needs...\" \n                        className=\"pl-10 min-h-[80px]\" \n                        {...field} \n                        data-testid=\"textarea-notes\"\n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isSubmitting}\n                className=\"flex-1\"\n                data-testid=\"button-schedule-call\"\n              >\n                {isSubmitting ? 'Scheduling...' : 'Schedule Call'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14815},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\n// Create client or null if env vars not set\nexport const supabase = (supabaseUrl && supabaseAnonKey) \n  ? createClient(supabaseUrl, supabaseAnonKey)\n  : null\n\nexport const isSupabaseConfigured = !!supabase","size_bytes":378},"client/src/types.ts":{"content":"export type CallRequest = {\n  full_name: string;\n  email: string;\n  company?: string;\n  notes?: string;\n  timezone: string;\n  start_at: string; // ISO\n  end_at: string;   // ISO\n  source?: string;  // 'website' | 'home' | 'contact'\n};\n\nexport type CallStatus = 'requested' | 'confirmed' | 'cancelled';\n\nexport type Call = CallRequest & {\n  id: string;\n  status: CallStatus;\n  created_at: string;\n};\n\nexport type Post = {\n  id: string;\n  slug: string;\n  title: string;\n  summary: string;\n  category: string;\n  date: string;\n  tags: string[];\n  content: string;\n};","size_bytes":562},"client/src/components/CaseStudyModal.tsx":{"content":"import { ArrowRight, ExternalLink, Building, Calendar, Target, CheckCircle } from 'lucide-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { trackButtonClick } from '@/lib/analytics';\n\ninterface CaseStudyModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  caseStudy: any; // Using any for now since we're working with existing data structure\n}\n\nexport default function CaseStudyModal({ \n  open, \n  onOpenChange, \n  caseStudy \n}: CaseStudyModalProps) {\n  if (!caseStudy) return null;\n\n  const handleContactUs = () => {\n    trackButtonClick('contact-from-case-study-modal', 'case-study-modal');\n    window.location.href = `/contact?project=${encodeURIComponent(caseStudy.title)}`;\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"case-study-modal\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {caseStudy.industry || 'Case Study'}\n            </Badge>\n            {caseStudy.duration && (\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Calendar className=\"h-3 w-3 mr-1\" />\n                {caseStudy.duration}\n              </div>\n            )}\n          </div>\n          <DialogTitle className=\"text-2xl md:text-3xl font-display\" data-testid=\"case-study-title\">\n            {caseStudy.title}\n          </DialogTitle>\n          <DialogDescription className=\"text-base\" data-testid=\"case-study-summary\">\n            {caseStudy.summary}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-8\">\n          {/* Challenge & Solution */}\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-3\">\n                  <Target className=\"h-5 w-5 text-red-500 mr-2\" />\n                  <h3 className=\"font-semibold\">Challenge</h3>\n                </div>\n                <p className=\"text-muted-foreground text-sm\">\n                  {caseStudy.challenge || 'Streamlining complex business processes and improving data visibility for better decision-making.'}\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-3\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500 mr-2\" />\n                  <h3 className=\"font-semibold\">Solution</h3>\n                </div>\n                <p className=\"text-muted-foreground text-sm\">\n                  {caseStudy.solution || 'Custom automation system with integrated dashboards, real-time reporting, and streamlined workflows.'}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Results */}\n          {caseStudy.results && (\n            <div>\n              <h3 className=\"font-semibold mb-4\">Key Results</h3>\n              <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {caseStudy.results.map((result: any, index: number) => (\n                  <Card key={index} className=\"bg-muted/50\">\n                    <CardContent className=\"p-4 text-center\">\n                      <div className={`text-2xl font-bold text-${caseStudy.color || 'primary'} mb-1`}>\n                        {result.value}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">{result.description}</div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Technologies */}\n          {caseStudy.technologies && caseStudy.technologies.length > 0 && (\n            <div>\n              <h3 className=\"font-semibold mb-4\">Technologies Used</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {caseStudy.technologies.map((tech: string, index: number) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-sm\">\n                    {tech}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Client Quote */}\n          {caseStudy.clientQuote && (\n            <Card className=\"bg-gradient-to-r from-primary/5 to-accent/5\">\n              <CardContent className=\"p-6\">\n                <blockquote className=\"text-muted-foreground italic mb-4\">\n                  \"{caseStudy.clientQuote.text}\"\n                </blockquote>\n                <div className=\"font-semibold\">\n                  {caseStudy.clientQuote.author}, {caseStudy.clientQuote.role}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-4 pt-4 border-t\">\n            <Button\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              onClick={handleContactUs}\n              data-testid=\"button-start-similar-project\"\n            >\n              <Building className=\"mr-2 h-4 w-4\" />\n              Start a Similar Project\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                trackButtonClick('download-case-study', 'case-study-modal');\n                // In a real implementation, this would download a PDF\n                alert('Case study download would be available with a real document management system.');\n              }}\n              data-testid=\"button-download-case-study\"\n            >\n              <ExternalLink className=\"mr-2 h-4 w-4\" />\n              Download Full Case Study\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6129},"client/src/pages/Blog.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Link } from 'wouter';\nimport { Search, Calendar, Tag, ArrowRight } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport Section from '@/components/Section';\nimport { fetchPosts } from '@/lib/api';\nimport { trackPageView, trackButtonClick } from '@/lib/analytics';\nimport type { Post } from '../types';\n\nexport default function Blog() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('All');\n\n  useEffect(() => {\n    trackPageView('blog');\n  }, []);\n\n  const { data: posts = [], isLoading } = useQuery({\n    queryKey: ['/data/posts'],\n    queryFn: fetchPosts,\n  });\n\n  // Get unique categories\n  const categories = ['All', ...Array.from(new Set(posts.map(post => post.category)))];\n\n  // Filter posts\n  const filteredPosts = posts.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         post.summary.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         post.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesCategory = selectedCategory === 'All' || post.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"pt-16\">\n      {/* Header */}\n      <Section className=\"section-padding bg-gradient-to-b from-muted/50 to-transparent\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <motion.h1 \n              className=\"font-display text-5xl md:text-6xl font-bold mb-6\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              data-testid=\"blog-page-title\"\n            >\n              Insights & <span className=\"gradient-text\">Best Practices</span>\n            </motion.h1>\n            <motion.p \n              className=\"text-xl text-muted-foreground max-w-3xl mx-auto\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              data-testid=\"blog-page-subtitle\"\n            >\n              Learn practical automation techniques, data analysis methods, and process optimization \n              strategies from our consulting experience.\n            </motion.p>\n          </div>\n\n          {/* Search and Filters */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n            className=\"flex flex-col md:flex-row gap-4 mb-12 max-w-2xl mx-auto\"\n          >\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search articles...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-posts\"\n              />\n            </div>\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-category\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                {categories.map((category) => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </motion.div>\n        </div>\n      </Section>\n\n      {/* Blog Posts */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {isLoading ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-muted rounded\"></div>\n                      <div className=\"h-3 bg-muted rounded w-5/6\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredPosts.length === 0 ? (\n            <div className=\"text-center py-16\" data-testid=\"no-posts-message\">\n              <p className=\"text-muted-foreground text-lg\">\n                {searchTerm || selectedCategory !== 'All' \n                  ? 'No articles found matching your criteria.' \n                  : 'No articles available yet.'}\n              </p>\n              {(searchTerm || selectedCategory !== 'All') && (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchTerm('');\n                    setSelectedCategory('All');\n                  }}\n                  className=\"mt-4\"\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear Filters\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredPosts.map((post, index) => (\n                <motion.div\n                  key={post.id}\n                  initial={{ opacity: 0, y: 30 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.1 }}\n                >\n                  <Card className=\"h-full hover:shadow-lg transition-all duration-300 group\">\n                    <CardHeader>\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {post.category}\n                        </Badge>\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <Calendar className=\"h-3 w-3 mr-1\" />\n                          {formatDate(post.date)}\n                        </div>\n                      </div>\n                      <h3 className=\"font-display text-xl font-bold group-hover:text-primary transition-colors\">\n                        {post.title}\n                      </h3>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <p className=\"text-muted-foreground text-sm leading-relaxed\">\n                        {post.summary}\n                      </p>\n                      \n                      <div className=\"flex flex-wrap gap-1\">\n                        {post.tags.map((tag, tagIndex) => (\n                          <Badge key={tagIndex} variant=\"secondary\" className=\"text-xs\">\n                            <Tag className=\"h-2 w-2 mr-1\" />\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                      \n                      <Link href={`/blog/${post.slug}`}>\n                        <Button \n                          variant=\"ghost\" \n                          className=\"w-full justify-between group-hover:bg-primary/10 transition-colors\"\n                          onClick={() => trackButtonClick('read-article', 'blog')}\n                          data-testid={`button-read-article-${post.slug}`}\n                        >\n                          Read Article\n                          <ArrowRight className=\"h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform\" />\n                        </Button>\n                      </Link>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          )}\n        </div>\n      </Section>\n    </div>\n  );\n}","size_bytes":8754},"client/src/pages/BlogPost.tsx":{"content":"import { useEffect } from 'react';\nimport { useParams, Link } from 'wouter';\nimport { motion } from 'framer-motion';\nimport { ArrowLeft, Calendar, Tag, ArrowRight } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport Section from '@/components/Section';\nimport { fetchPostBySlug, fetchPosts } from '@/lib/api';\nimport { trackPageView, trackButtonClick } from '@/lib/analytics';\nimport type { Post } from '../types';\n\nexport default function BlogPost() {\n  const { slug } = useParams();\n\n  useEffect(() => {\n    if (slug) {\n      trackPageView(`blog-${slug}`);\n    }\n  }, [slug]);\n\n  const { data: post, isLoading, error } = useQuery({\n    queryKey: ['/data/posts', slug],\n    queryFn: () => fetchPostBySlug(slug || ''),\n    enabled: !!slug,\n  });\n\n  const { data: allPosts = [] } = useQuery({\n    queryKey: ['/data/posts'],\n    queryFn: fetchPosts,\n  });\n\n  // Get related posts (same category, excluding current)\n  const relatedPosts = allPosts\n    .filter(p => p.category === post?.category && p.slug !== post?.slug)\n    .slice(0, 3);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"pt-16\">\n        <Section className=\"section-padding\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"animate-pulse space-y-8\">\n              <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n              <div className=\"h-12 bg-muted rounded w-3/4\"></div>\n              <div className=\"space-y-4\">\n                <div className=\"h-4 bg-muted rounded\"></div>\n                <div className=\"h-4 bg-muted rounded w-5/6\"></div>\n                <div className=\"h-4 bg-muted rounded w-4/6\"></div>\n              </div>\n            </div>\n          </div>\n        </Section>\n      </div>\n    );\n  }\n\n  if (error || !post) {\n    return (\n      <div className=\"pt-16\">\n        <Section className=\"section-padding\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n            >\n              <h1 className=\"font-display text-4xl font-bold mb-6\" data-testid=\"blog-not-found-title\">\n                Article Not Found\n              </h1>\n              <p className=\"text-muted-foreground mb-8\" data-testid=\"blog-not-found-message\">\n                The article you're looking for doesn't exist or may have been moved.\n              </p>\n              <Link href=\"/blog\">\n                <Button data-testid=\"button-back-to-blog\">\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Back to Blog\n                </Button>\n              </Link>\n            </motion.div>\n          </div>\n        </Section>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pt-16\">\n      {/* Back Navigation */}\n      <Section className=\"py-8\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Link href=\"/blog\">\n            <Button \n              variant=\"ghost\" \n              className=\"mb-4\"\n              onClick={() => trackButtonClick('back-to-blog', 'blog-post')}\n              data-testid=\"button-back-to-blog\"\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Articles\n            </Button>\n          </Link>\n        </div>\n      </Section>\n\n      {/* Article Header */}\n      <Section className=\"pb-8\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n          >\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Badge variant=\"outline\" data-testid=\"post-category\">\n                {post.category}\n              </Badge>\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Calendar className=\"h-3 w-3 mr-1\" />\n                <span data-testid=\"post-date\">{formatDate(post.date)}</span>\n              </div>\n            </div>\n            \n            <h1 className=\"font-display text-4xl md:text-5xl font-bold mb-6\" data-testid=\"post-title\">\n              {post.title}\n            </h1>\n            \n            <p className=\"text-xl text-muted-foreground mb-8\" data-testid=\"post-summary\">\n              {post.summary}\n            </p>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              {post.tags.map((tag, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-sm\">\n                  <Tag className=\"h-3 w-3 mr-1\" />\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          </motion.div>\n        </div>\n      </Section>\n\n      {/* Article Content */}\n      <Section className=\"pb-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.article\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"prose prose-lg prose-slate dark:prose-invert max-w-none\"\n            data-testid=\"post-content\"\n          >\n            <ReactMarkdown remarkPlugins={[remarkGfm]}>\n              {post.content}\n            </ReactMarkdown>\n          </motion.article>\n        </div>\n      </Section>\n\n      {/* Related Posts */}\n      {relatedPosts.length > 0 && (\n        <Section className=\"section-padding bg-muted/50\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n            >\n              <h2 className=\"font-display text-3xl font-bold mb-8 text-center\" data-testid=\"related-posts-title\">\n                Related Articles\n              </h2>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {relatedPosts.map((relatedPost, index) => (\n                  <motion.div\n                    key={relatedPost.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.6, delay: index * 0.1 }}\n                  >\n                    <Card className=\"h-full hover:shadow-lg transition-all duration-300 group\">\n                      <CardHeader>\n                        <div className=\"flex items-center gap-2 mb-3\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {relatedPost.category}\n                          </Badge>\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <Calendar className=\"h-3 w-3 mr-1\" />\n                            {formatDate(relatedPost.date)}\n                          </div>\n                        </div>\n                        <h3 className=\"font-display text-lg font-bold group-hover:text-primary transition-colors\">\n                          {relatedPost.title}\n                        </h3>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <p className=\"text-muted-foreground text-sm leading-relaxed\">\n                          {relatedPost.summary}\n                        </p>\n                        \n                        <Link href={`/blog/${relatedPost.slug}`}>\n                          <Button \n                            variant=\"ghost\" \n                            className=\"w-full justify-between group-hover:bg-primary/10 transition-colors\"\n                            onClick={() => trackButtonClick('read-related-article', 'blog-post')}\n                            data-testid={`button-read-related-${relatedPost.slug}`}\n                          >\n                            Read Article\n                            <ArrowRight className=\"h-4 w-4 ml-2 group-hover:translate-x-1 transition-transform\" />\n                          </Button>\n                        </Link>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n          </div>\n        </Section>\n      )}\n\n      {/* CTA Section */}\n      <Section className=\"section-padding\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"bg-gradient-to-r from-primary/10 via-accent/5 to-purple-500/10 p-12 rounded-2xl\"\n            data-testid=\"blog-cta-section\"\n          >\n            <h2 className=\"font-display text-3xl md:text-4xl font-bold mb-6\" data-testid=\"blog-cta-title\">\n              Ready to Implement These Ideas?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8\" data-testid=\"blog-cta-subtitle\">\n              Let's discuss how to apply these automation strategies to your specific business needs.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/contact\">\n                <Button \n                  size=\"lg\"\n                  className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                  onClick={() => trackButtonClick('start-project-from-blog', 'blog-post')}\n                  data-testid=\"button-start-project\"\n                >\n                  Start Your Project\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n              <Link href=\"/blog\">\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\"\n                  onClick={() => trackButtonClick('explore-more-articles', 'blog-post')}\n                  data-testid=\"button-explore-articles\"\n                >\n                  Explore More Articles\n                </Button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n      </Section>\n    </div>\n  );\n}","size_bytes":10632},"client/src/hooks/use-toast.tsx":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/viewport.tsx":{"content":"import { useEffect, useState } from 'react';\n\nexport function useIntersectionObserver(\n  elementRef: React.RefObject<Element>,\n  options: IntersectionObserverInit = {}\n) {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const [hasIntersected, setHasIntersected] = useState(false);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsIntersecting(entry.isIntersecting);\n        if (entry.isIntersecting && !hasIntersected) {\n          setHasIntersected(true);\n        }\n      },\n      {\n        threshold: 0.1,\n        rootMargin: '-10% 0px',\n        ...options,\n      }\n    );\n\n    observer.observe(element);\n\n    return () => {\n      observer.unobserve(element);\n    };\n  }, [hasIntersected]);\n\n  return { isIntersecting, hasIntersected };\n}\n\nexport function useScrollProgress() {\n  const [scrollProgress, setScrollProgress] = useState(0);\n\n  useEffect(() => {\n    const updateScrollProgress = () => {\n      const scrollTop = window.scrollY;\n      const docHeight = document.documentElement.scrollHeight - window.innerHeight;\n      const progress = scrollTop / docHeight;\n      setScrollProgress(Math.max(0, Math.min(1, progress)));\n    };\n\n    window.addEventListener('scroll', updateScrollProgress);\n    updateScrollProgress(); // Initial call\n\n    return () => window.removeEventListener('scroll', updateScrollProgress);\n  }, []);\n\n  return scrollProgress;\n}\n\nexport function useActiveSection() {\n  const [activeSection, setActiveSection] = useState('hero');\n\n  useEffect(() => {\n    const sections = document.querySelectorAll('[data-section]');\n    \n    const updateActiveSection = () => {\n      let current = '';\n      sections.forEach(section => {\n        const rect = section.getBoundingClientRect();\n        if (rect.top <= window.innerHeight / 2 && rect.bottom >= window.innerHeight / 2) {\n          current = section.getAttribute('data-section') || '';\n        }\n      });\n      \n      if (current && current !== activeSection) {\n        setActiveSection(current);\n      }\n    };\n\n    window.addEventListener('scroll', updateActiveSection);\n    updateActiveSection(); // Initial call\n\n    return () => window.removeEventListener('scroll', updateActiveSection);\n  }, [activeSection]);\n\n  return activeSection;\n}\n","size_bytes":2356},"client/src/components/ScrollToTop.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\n\nexport default function ScrollToTop() {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n  }, [location]);\n\n  return null;\n}","size_bytes":269},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from 'next-themes';\nimport { useEffect, useState } from 'react';\n\nexport default function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return (\n      <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9\">\n        <div className=\"h-4 w-4\" />\n      </Button>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\n      className=\"h-9 w-9\"\n      data-testid=\"theme-toggle\"\n    >\n      {theme === 'dark' ? (\n        <Sun className=\"h-4 w-4\" />\n      ) : (\n        <Moon className=\"h-4 w-4\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":910}},"version":1}